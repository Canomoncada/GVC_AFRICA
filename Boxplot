# ================================================================
# WTO/ADB/GAI Editorial Style - FACETED PANEL BOXPLOTS BY PILLAR
# Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-06-06 05:01:21
# Current User's Login: Canomoncada
# Version: GVC_AFRICA_Faceted_Panel_Boxplots_v1.1_PIVOT_LONGER_FIXED
# ================================================================

# Load required packages
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(showtext)
library(scales)
library(stringr)
library(fs)

# ================================================================
# EXECUTION METADATA WITH CURRENT TIMESTAMP
# ================================================================

execution_metadata <- list(
  datetime_utc = "2025-06-06 05:01:21",
  user = "Canomoncada",
  version = "GVC_AFRICA_Faceted_Panel_Boxplots_v1.1_PIVOT_LONGER_FIXED",
  target_countries = "101_five_regions_exact",
  target_regions = c("AFRICA", "OECD", "CHINA", "LAC", "ASEAN"),
  data_year = "2023",
  style = "WTO/ADB/GAI Editorial Standard - Faceted Panel Boxplots Fixed",
  clean_data_source_path = "/Volumes/VALEN/Africa:LAC/Africa_GVC/Data Annex",
  export_path = "/Volumes/VALEN/Africa:LAC/Harmonization/GVC AFRICA/faceted_panel_boxplots_101_countries_fixed"
)

# Create export directory
fs::dir_create(execution_metadata$export_path, recurse = TRUE)

# ================================================================
# FONT SETUP - GAI Editorial Standard
# ================================================================

setup_gai_fonts <- function() {
  tryCatch({
    message("Setting up GAI Editorial fonts...")
    font_add("Arial", regular = "Arial")
    font_add_google("Open Sans", "opensans")
    showtext_auto()
    showtext_opts(dpi = 300)
    message("GAI Editorial fonts configured successfully")
    return("Arial")
  }, error = function(e) {
    message("Font fallback to system sans-serif: ", e$message)
    return("sans")
  })
}

FONT_FAMILY <- setup_gai_fonts()

# ================================================================
# EDITORIAL COLORS AND STYLING
# ================================================================

gvc_colors <- c(
  "LAC"    = "#FF7F00",     # Orange
  "OECD"   = "#1F78B4",     # Blue
  "ASEAN"  = "#33A02C",     # Green
  "CHINA"  = "#E31A1C",     # Red
  "AFRICA" = "#FFD700"      # Yellow
)

gai_colors <- list(
  primary_text = "#222222", 
  secondary_text = "#555555",
  caption_text = "#333333",
  axis_text = "#333333",
  grid_lines = "#EAEAEA", 
  white_background = "white"
)

color_guide_text <- "Color Guide: LAC (Orange) | OECD (Blue) | ASEAN (Green) | CHINA (Red) | AFRICA (Yellow)"

theme_gvc_publication <- function(base_size = 13, base_family = FONT_FAMILY) {
  theme_minimal(base_size = base_size, base_family = base_family) +
    theme(
      text = element_text(color = gai_colors$primary_text, family = base_family),
      plot.title = element_text(face = "bold", size = 16, hjust = 0.5, margin = margin(b = 12)),
      plot.subtitle = element_text(face = "bold", size = 12, hjust = 0.5, color = gai_colors$secondary_text),
      plot.caption = element_text(size = 9, face = "bold", color = gai_colors$caption_text, hjust = 0, margin = margin(t = 25), lineheight = 1.3),
      axis.title = element_text(face = "bold", size = 12),
      axis.text = element_text(size = 11, color = gai_colors$axis_text),
      axis.text.x = element_text(angle = 45, hjust = 1),
      panel.grid.major = element_line(color = gai_colors$grid_lines, size = 0.35),
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = gai_colors$white_background, color = NA),
      plot.background = element_rect(fill = gai_colors$white_background, color = NA),
      legend.position = "none",
      plot.margin = margin(20, 20, 80, 20),
      strip.text = element_text(face = "bold", size = 11),
      strip.background = element_rect(fill = "#F0F0F0", color = "#CCCCCC")
    )
}

# ================================================================
# EXACT 101 COUNTRIES AS SPECIFIED
# ================================================================

region_countries_101_exact <- list(
  africa = c(
    "Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cameroon", 
    "Chad", "Comoros", "Djibouti", "Egypt", "Equatorial Guinea", "Ethiopia", "Gabon", 
    "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", "Liberia", "Libya", 
    "Madagascar", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", 
    "Namibia", "Niger", "Nigeria", "Rwanda", "Senegal", "Seychelles", "Sierra Leone", 
    "Somalia", "South Africa", "Sudan", "Togo", "Tunisia", "Zimbabwe"
  ),  # 40 countries
  
  oecd = c(
    "Australia", "Austria", "Belgium", "Canada", "Czech Republic", "Denmark", 
    "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Iceland", 
    "Ireland", "Israel", "Italy", "Japan", "Latvia", "Lithuania", "Luxembourg", 
    "Netherlands", "New Zealand", "Norway", "Poland", "Portugal", "Slovakia", 
    "Slovenia", "Spain", "Sweden", "Switzerland"
  ),  # 30 countries
  
  lac = c(
    "Argentina", "Belize", "Brazil", "Chile", "Colombia", "Costa Rica", 
    "Dominican Republic", "Ecuador", "El Salvador", "Guatemala", "Guyana", 
    "Haiti", "Honduras", "Jamaica", "Mexico", "Nicaragua", "Panama", 
    "Paraguay", "Peru", "Suriname", "Uruguay"
  ),  # 21 countries
  
  asean = c(
    "Brunei", "Cambodia", "Indonesia", "Laos", "Malaysia", "Philippines", 
    "Singapore", "Thailand", "Vietnam"
  ),  # 9 countries
  
  china = c("China")  # 1 country
)

assign_region_101_exact <- function(country) {
  if (is.na(country) || country == "" || is.null(country)) return(NA_character_)
  
  country_clean <- trimws(as.character(country))
  
  if (country_clean %in% region_countries_101_exact$africa) return("AFRICA")
  if (country_clean %in% region_countries_101_exact$china) return("CHINA")
  if (country_clean %in% region_countries_101_exact$lac) return("LAC")
  if (country_clean %in% region_countries_101_exact$asean) return("ASEAN")
  if (country_clean %in% region_countries_101_exact$oecd) return("OECD")
  
  return(NA_character_)
}

# ================================================================
# LOAD CORE PILLARS DATA
# ================================================================

message("Loading Core Pillars data from Africa GVC Data Annex...")
message("Current Date/Time: ", execution_metadata$datetime_utc)
message("User: ", execution_metadata$user)
message("Target: Faceted panel boxplots for 101 countries")

# Load the Core_Pillars_Annex_138_Final.csv file
tryCatch({
  Core_Pillars_138 <- read_csv(file.path(execution_metadata$clean_data_source_path, "Core_Pillars_Annex_138_Final.csv"), show_col_types = FALSE)
  message("Core_Pillars_Annex_138_Final.csv loaded: ", nrow(Core_Pillars_138), " countries")
}, error = function(e) {
  message("Error loading Core Pillars data: ", e$message)
  stop("ERROR: Could not load Core Pillars data. Please ensure file exists.")
})

# ================================================================
# DATA STRUCTURE INSPECTION AND COLUMN IDENTIFICATION
# ================================================================

message("\nInspecting Core Pillars data structure...")
message("Total rows: ", nrow(Core_Pillars_138))
message("Total columns: ", ncol(Core_Pillars_138))

# Identify country column
country_col <- NULL
possible_country_cols <- c("Country", "country", "Country_Name", "COUNTRY")
for(col in possible_country_cols) {
  if(col %in% names(Core_Pillars_138)) {
    country_col <- col
    break
  }
}

if(is.null(country_col)) {
  country_col <- names(Core_Pillars_138)[1]
  message("Using first column as country identifier: ", country_col)
}

message("Country column: ", country_col)

# ================================================================
# CREATE TARGET COUNTRIES LIST WITH REGIONS
# ================================================================

message("\nCreating target countries list with regions...")

# Get all unique countries from data
all_countries_in_data <- Core_Pillars_138[[country_col]]
all_countries_in_data <- all_countries_in_data[!is.na(all_countries_in_data) & all_countries_in_data != ""]
all_countries_in_data <- sort(unique(all_countries_in_data))

message("Total countries found in Core Pillars data: ", length(all_countries_in_data))

# Apply region assignments
region_assignments <- sapply(all_countries_in_data, assign_region_101_exact)

# Create target countries data frame
target_countries_101 <- data.frame(
  Country = character(0),
  Region = character(0),
  stringsAsFactors = FALSE
)

# Add countries that match our target regions
for(i in seq_along(all_countries_in_data)) {
  country <- all_countries_in_data[i]
  region <- region_assignments[i]
  
  if(!is.na(region) && region != "") {
    target_countries_101 <- rbind(target_countries_101, 
                                  data.frame(Country = country, Region = region, stringsAsFactors = FALSE))
  }
}

total_target_countries <- nrow(target_countries_101)
message("Target countries: ", total_target_countries)

# ================================================================
# PREPARE CLEAN DATASET
# ================================================================

message("\nPreparing clean dataset...")

# Create the clean dataset
pillar_data_101 <- Core_Pillars_138 %>%
  rename(Country = !!sym(country_col)) %>%
  filter(Country %in% target_countries_101$Country)

# Manually add Region column
pillar_data_101$Region <- NA_character_

# Populate Region column
for(i in 1:nrow(pillar_data_101)) {
  country <- pillar_data_101$Country[i]
  matching_row <- which(target_countries_101$Country == country)
  
  if(length(matching_row) > 0) {
    pillar_data_101$Region[i] <- target_countries_101$Region[matching_row[1]]
  }
}

# Remove rows without regions and arrange
pillar_data_101 <- pillar_data_101 %>%
  filter(!is.na(Region) & Region != "") %>%
  arrange(Region, Country)

message("Final dataset: ", nrow(pillar_data_101), " countries")

# ================================================================
# CREATE COUNTRY CAPTION TEXT
# ================================================================

country_lists <- target_countries_101 %>%
  group_by(Region) %>%
  summarise(
    Countries = paste(Country, collapse = ", "),
    Count = n(),
    .groups = "drop"
  ) %>%
  arrange(match(Region, execution_metadata$target_regions))

country_caption_text <- paste0(
  "\n\nRegion and Country Composition (", total_target_countries, " total countries):\n",
  "AFRICA (40): Algeria, Angola, Benin, Botswana, Burkina Faso, Burundi, Cameroon, Chad, Comoros, Djibouti, Egypt, Equatorial Guinea, Ethiopia, Gabon, Ghana, Guinea, Guinea-Bissau, Kenya, Lesotho, Liberia, Libya, Madagascar, Mali, Mauritania, Mauritius, Morocco, Mozambique, Namibia, Niger, Nigeria, Rwanda, Senegal, Seychelles, Sierra Leone, Somalia, South Africa, Sudan, Togo, Tunisia, Zimbabwe\n\n",
  "OECD (30): Australia, Austria, Belgium, Canada, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Israel, Italy, Japan, Latvia, Lithuania, Luxembourg, Netherlands, New Zealand, Norway, Poland, Portugal, Slovakia, Slovenia, Spain, Sweden, Switzerland\n\n",
  "LAC (21): Argentina, Belize, Brazil, Chile, Colombia, Costa Rica, Dominican Republic, Ecuador, El Salvador, Guatemala, Guyana, Haiti, Honduras, Jamaica, Mexico, Nicaragua, Panama, Paraguay, Peru, Suriname, Uruguay\n\n",
  "ASEAN (9): Brunei, Cambodia, Indonesia, Laos, Malaysia, Philippines, Singapore, Thailand, Vietnam\n\n",
  "CHINA (1): China"
)

# ================================================================
# DEFINE PILLAR-INDICATOR MAPPINGS
# ================================================================

# Utility: Helper to combine strings and handle NULLs
"%+%" <- function(a, b) paste0(a, ifelse(is.null(b), "", b))

pillar_indicator_panels <- list(
  "Figure_1_technology_readiness" = list(
    indicators = c("Internet Penetration Index", "Mobile Connectivity Index"),
    title = "Figure 1: Technology Readiness: Regional Performance Distribution",
    subtitle = "NORMALIZED INDICATORS (0-1 SCALE) BY REGION",
    caption = "Source: Author's calculations using institutional databases (ITU, GSMA). Scores are min–max normalized (0–1); higher values indicate better performance. Each dot represents a country. " %+% color_guide_text %+% country_caption_text
  ),
  "Figure_2_trade_investment_readiness" = list(
    indicators = c("Trade to GDP Ratio Index", "Logistics Performance Index"),
    title = "Figure 2: Trade & Investment Readiness: Regional Performance Distribution",
    subtitle = "NORMALIZED INDICATORS (0-1 SCALE) BY REGION",
    caption = "Source: Author's calculations using institutional databases (World Bank). Scores are min–max normalized (0–1); higher values indicate better performance. Each dot represents a country. " %+% color_guide_text %+% country_caption_text
  ),
  "Figure_3_sustainability_readiness" = list(
    indicators = c("Modern Renewables Share Index", "CO2 Intensity Index"),
    title = "Figure 3: Sustainability Readiness: Regional Performance Distribution",
    subtitle = "NORMALIZED INDICATORS (0-1 SCALE) BY REGION",
    caption = "Source: Author's calculations using institutional databases (IRENA, World Bank, EDGAR). Scores are min–max normalized (0–1); higher values indicate better performance. Note: For CO₂ Intensity Index, a higher score = lower emissions (better). Each dot represents a country. " %+% color_guide_text %+% country_caption_text
  ),
  "Figure_4_institutional_geopolitical_readiness" = list(
    indicators = c("Political Stability Index", "Business Ready Index"),
    title = "Figure 4: Institutional & Geopolitical Readiness: Regional Performance Distribution",
    subtitle = "NORMALIZED INDICATORS (0-1 SCALE) BY REGION",
    caption = "Source: Author's calculations using institutional databases (World Bank). Scores are min–max normalized (0–1); higher values indicate better performance. Each dot represents a country. " %+% color_guide_text %+% country_caption_text
  )
)

# ================================================================
# MAIN EXECUTION - CREATE FACETED PANEL BOXPLOTS - FIXED VERSION
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("CREATING FACETED PANEL BOXPLOTS FOR FOUR PILLARS - FIXED VERSION")
message("Current Date/Time: ", execution_metadata$datetime_utc)
message("User: ", execution_metadata$user)
message("Processing ", total_target_countries, " countries in 5 regions")
message("Creating 4 faceted panel figures with 2 indicators each")
message(paste(rep("=", 80), collapse=""))

results <- list()

# Reshape Data and Plot for Each Pillar - FIXED VERSION
for (fig_name in names(pillar_indicator_panels)) {
  ind_info <- pillar_indicator_panels[[fig_name]]
  indicator_titles <- ind_info$indicators
  
  message("\n", paste(rep("-", 60), collapse=""))
  message("PROCESSING: ", toupper(fig_name))
  message("Indicators: ", paste(indicator_titles, collapse = ", "))
  message(paste(rep("-", 60), collapse=""))
  
  # Find columns in your data (using robust name matching)
  found_columns <- character(0)
  column_mapping <- list()
  
  for(ind in indicator_titles) {
    # Create flexible pattern matching
    pattern <- str_replace_all(ind, "\\s+", ".*")  # Replace spaces with .*
    pattern <- str_replace_all(pattern, "–", ".*")  # Replace en-dash with .*
    pattern <- str_replace_all(pattern, "-", ".*")  # Replace hyphen with .*
    pattern <- str_replace_all(pattern, "₂", "2")   # Replace subscript 2
    
    matched_col <- names(pillar_data_101)[str_detect(names(pillar_data_101), regex(pattern, ignore_case = TRUE))]
    if(length(matched_col) > 0) {
      found_col <- matched_col[1]
      found_columns <- c(found_columns, found_col)
      column_mapping[[found_col]] <- ind
      message("   Found: ", ind, " -> ", found_col)
    } else {
      message("   NOT FOUND: ", ind)
    }
  }
  
  if(length(found_columns) == 0) {
    message("No valid indicators found for ", fig_name)
    next
  }
  
  # Convert to numeric
  for(col in found_columns) {
    pillar_data_101[[col]] <- suppressWarnings(as.numeric(as.character(pillar_data_101[[col]])))
  }
  
  # Create plot data step by step - FIXED APPROACH
  message("Creating plot data...")
  
  # Step 1: Select relevant columns
  plot_data_wide <- pillar_data_101 %>%
    select(Country, Region, all_of(found_columns))
  
  message("Step 1: Selected ", ncol(plot_data_wide), " columns")
  
  # Step 2: Use pivot_longer with proper column specification - FIXED
  tryCatch({
    plot_long <- plot_data_wide %>%
      pivot_longer(
        cols = all_of(found_columns),  # Use the exact column names
        names_to = "Indicator_Column",
        values_to = "Value"
      )
    message("Step 2: pivot_longer successful - ", nrow(plot_long), " rows")
  }, error = function(e) {
    message("Error in pivot_longer: ", e$message)
    message("Columns to pivot: ", paste(found_columns, collapse = ", "))
    message("Available columns: ", paste(names(plot_data_wide), collapse = ", "))
    stop("Failed to reshape data")
  })
  
  # Step 3: Create clean indicator labels and filter
  plot_long <- plot_long %>%
    mutate(
      Indicator_Label = case_when(
        str_detect(Indicator_Column, regex("Internet.*Penetration", ignore_case = TRUE)) ~ "Internet Penetration Index",
        str_detect(Indicator_Column, regex("Mobile.*Connectivity", ignore_case = TRUE)) ~ "Mobile Connectivity Index",
        str_detect(Indicator_Column, regex("Trade.*GDP", ignore_case = TRUE)) ~ "Trade-to-GDP Ratio Index",
        str_detect(Indicator_Column, regex("Logistics.*Performance", ignore_case = TRUE)) ~ "Logistics Performance Index",
        str_detect(Indicator_Column, regex(".*Renewable.*Share", ignore_case = TRUE)) ~ "Modern Renewables Share Index",
        str_detect(Indicator_Column, regex("CO2|CO₂", ignore_case = TRUE)) ~ "CO₂ Intensity Index",
        str_detect(Indicator_Column, regex("Political.*Stability", ignore_case = TRUE)) ~ "Political Stability Index",
        str_detect(Indicator_Column, regex("Business.*Ready", ignore_case = TRUE)) ~ "Business Ready Index",
        TRUE ~ Indicator_Column
      ),
      Region = factor(Region, levels = execution_metadata$target_regions)
    ) %>%
    filter(
      !is.na(Value) & 
      !is.na(Region) & 
      is.finite(Value)
    )
  
  message("Step 3: Final plot data - ", nrow(plot_long), " observations")
  
  if(nrow(plot_long) == 0) {
    message("No valid data for plotting ", fig_name)
    next
  }
  
  message("Unique indicators: ", paste(unique(plot_long$Indicator_Label), collapse = ", "))
  message("Countries with data: ", length(unique(plot_long$Country)))
  
  # Create faceted plot
  p <- ggplot(plot_long, aes(x = Region, y = Value, fill = Region)) +
    geom_boxplot(
      alpha = 0.8, 
      outlier.shape = 21, 
      outlier.alpha = 0.4,
      size = 0.6, 
      outlier.size = 1.5, 
      width = 0.7
    ) +
    geom_jitter(
      width = 0.2, 
      alpha = 0.6, 
      size = 1.2, 
      color = "black"
    ) +
    scale_fill_manual(values = gvc_colors) +
    scale_y_continuous(
      name = "NORMALIZED SCORE (0-1)",
      limits = c(0, 1),
      breaks = seq(0, 1, 0.2),
      labels = scales::number_format(accuracy = 0.1),
      expand = expansion(mult = c(0.02, 0.02))
    ) +
    facet_wrap(~Indicator_Label, ncol = 2, scales = "fixed") +
    labs(
      title = ind_info$title,
      subtitle = paste(ind_info$subtitle, "(", length(unique(plot_long$Country)), "Countries)"),
      x = "Region",
      caption = ind_info$caption
    ) +
    theme_gvc_publication(base_size = 13)
  
  # Export files
  out_png <- file.path(execution_metadata$export_path, paste0(fig_name, ".png"))
  out_pdf <- file.path(execution_metadata$export_path, paste0(fig_name, ".pdf"))
  out_jpg <- file.path(execution_metadata$export_path, paste0(fig_name, ".jpeg"))
  
  tryCatch({
    ggsave(out_png, p, width = 12, height = 8, dpi = 320, bg = "white")
    message("PNG exported: ", basename(out_png))
  }, error = function(e) message("PNG export failed: ", e$message))
  
  tryCatch({
    ggsave(out_pdf, p, width = 12, height = 8, bg = "white")
    message("PDF exported: ", basename(out_pdf))
  }, error = function(e) message("PDF export failed: ", e$message))
  
  tryCatch({
    ggsave(out_jpg, p, width = 12, height = 8, dpi = 320, bg = "white")
    message("JPEG exported: ", basename(out_jpg))
  }, error = function(e) message("JPEG export failed: ", e$message))
  
  results[[fig_name]] <- list(
    plot = p,
    indicators = unique(plot_long$Indicator_Label),
    countries = length(unique(plot_long$Country)),
    observations = nrow(plot_long)
  )
  
  message("SUCCESS: ", fig_name, " completed!")
}

# Export country lists
csv_file <- file.path(execution_metadata$export_path, "Country_Lists_Faceted_Panels_Fixed.csv")
write.csv(country_lists, csv_file, row.names = FALSE)
message("\nCountry lists exported: ", basename(csv_file))

# ================================================================
# FINAL SUMMARY
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("FACETED PANEL BOXPLOTS PIPELINE COMPLETED - FIXED VERSION")
message(paste(rep("=", 80), collapse=""))

successful_figures <- sum(!sapply(results, is.null))
total_figures <- length(pillar_indicator_panels)

message("FINAL SUMMARY:")
message("   Timestamp: ", execution_metadata$datetime_utc)
message("   User: ", execution_metadata$user)
message("   Countries analyzed: ", total_target_countries)
message("   Successful faceted figures: ", successful_figures, "/", total_figures)
message("   Export directory: ", execution_metadata$export_path)

message("\nCOUNTRIES BREAKDOWN:")
for (i in 1:nrow(country_lists)) {
  message("   ", country_lists$Region[i], ": ", country_lists$Count[i], " countries")
}

message("\nGENERATED FACETED PANEL FIGURES:")
for (fig_name in names(results)) {
  if (!is.null(results[[fig_name]])) {
    result <- results[[fig_name]]
    message("   ", fig_name, ":")
    message("      Indicators: ", paste(result$indicators, collapse = ", "))
    message("      Countries with data: ", result$countries)
    message("      Total observations: ", result$observations)
    message("      Files: PNG, PDF, JPEG")
  }
}

message("\nFACETED PANEL STRUCTURE:")
message("   • Each figure contains 2 related indicators in separate panels")
message("   • Figure 1: Technology (Internet Penetration + Mobile Connectivity)")
message("   • Figure 2: Trade & Investment (Trade-to-GDP + Logistics Performance)")
message("   • Figure 3: Sustainability (Renewables Share + CO₂ Intensity)")
message("   • Figure 4: Institutional (Political Stability + Business Ready)")

message("\nINTERPRETATION GUIDE:")
message("   • Panels: Each panel shows one specific indicator")
message("   • Dots: Each dot = one country's normalized (0–1) score for that indicator")
message("   • Box/Whiskers: Show distribution (median, quartiles, outliers) for each region")
message("   • Colors: LAC (Orange) | OECD (Blue) | ASEAN (Green) | CHINA (Red) | AFRICA (Yellow)")
message("   • Normalization: Min–max (0–1); higher values = better performance")
message("   • Special Note: CO₂ Intensity - higher normalized score = better (lower actual emissions)")

message("\nFIXES APPLIED:")
message("   • Fixed pivot_longer error by using exact column names")
message("   • Added step-by-step data reshaping with error handling")
message("   • Enhanced column mapping and validation")
message("   • Improved debugging and error messages")

message("\n", color_guide_text)
message("\n", paste(rep("=", 80), collapse=""))
message("ALL FACETED PANEL BOXPLOTS READY FOR PUBLICATION!")
message("PIVOT_LONGER ERROR FIXED - 4 PILLAR FIGURES WITH 2-PANEL FACETS EACH CREATED")
message(paste(rep("=", 80), collapse=""))






######################################################################################################################################




















# ================================================================
# WTO/ADB/GAI Editorial Style - COMPLETE GVC AFRICA PIPELINE
# Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-06-06 12:56:20
# Current User's Login: Canomoncada
# Version: GVC_AFRICA_COMPLETE_PIPELINE_v1.3_TOP_PERFORMERS
# ================================================================

# Load required packages
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(showtext)
library(scales)
library(stringr)
library(fs)
library(openxlsx)

# ================================================================
# EXECUTION METADATA WITH UPDATED TIMESTAMP
# ================================================================

execution_metadata <- list(
  datetime_utc = "2025-06-06 12:56:20",
  user = "Canomoncada",
  version = "GVC_AFRICA_COMPLETE_PIPELINE_v1.3_TOP_PERFORMERS",
  target_countries = "101_five_regions_exact",
  target_regions = c("AFRICA", "OECD", "CHINA", "LAC", "ASEAN"),
  data_year = "2023",
  style = "WTO/ADB/GAI Editorial Standard - Complete Pipeline with Top Performer Highlighting",
  clean_data_source_path = "/Volumes/VALEN/Africa:LAC/Africa_GVC/Data Annex",
  export_path = "/Volumes/VALEN/Africa:LAC/Harmonization/GVC AFRICA"
)

# Create export directories
fs::dir_create(execution_metadata$export_path, recurse = TRUE)
fs::dir_create(file.path(execution_metadata$export_path, "figures"), recurse = TRUE)
fs::dir_create(file.path(execution_metadata$export_path, "ranking_tables"), recurse = TRUE)

message("Export directories created/verified:")
message("  Main: ", execution_metadata$export_path)
message("  Figures: ", file.path(execution_metadata$export_path, "figures"))
message("  Rankings: ", file.path(execution_metadata$export_path, "ranking_tables"))

# ================================================================
# FONT SETUP - GAI Editorial Standard
# ================================================================

setup_gai_fonts <- function() {
  tryCatch({
    message("Setting up GAI Editorial fonts...")
    font_add("Arial", regular = "Arial")
    font_add_google("Open Sans", "opensans")
    showtext_auto()
    showtext_opts(dpi = 320)
    message("GAI Editorial fonts configured successfully")
    return("Arial")
  }, error = function(e) {
    message("Font fallback to system sans-serif: ", e$message)
    return("sans")
  })
}

FONT_FAMILY <- setup_gai_fonts()

# ================================================================
# EDITORIAL COLORS AND STYLING
# ================================================================

gvc_colors <- c(
  "LAC"    = "#FF7F00",     # Orange
  "OECD"   = "#1F78B4",     # Blue
  "ASEAN"  = "#33A02C",     # Green
  "CHINA"  = "#E31A1C",     # Red
  "AFRICA" = "#FFD700"      # Yellow
)

# Excel regional colors
excel_region_colors <- list(
  "LAC" = "#FFB366",        # Orange
  "OECD" = "#66B3FF",       # Blue
  "ASEAN" = "#66CC66",      # Green
  "CHINA" = "#FF6666",      # Red
  "AFRICA" = "#FFD700",     # Yellow
  "OTHER" = "#CCCCCC"       # Gray
)

gai_colors <- list(
  primary_text = "#222222", 
  secondary_text = "#555555",
  caption_text = "#333333",
  axis_text = "#333333",
  grid_lines = "#EAEAEA", 
  white_background = "white"
)

theme_gvc_faceted <- function(base_size = 12, base_family = FONT_FAMILY) {
  theme_minimal(base_size = base_size, base_family = base_family) +
    theme(
      text = element_text(color = gai_colors$primary_text, family = base_family),
      plot.title = element_text(face = "bold", size = 16, hjust = 0.5, margin = margin(b = 15)),
      plot.subtitle = element_text(face = "bold", size = 12, hjust = 0.5, margin = margin(b = 10)),
      plot.caption = element_text(size = 10, color = gai_colors$caption_text, hjust = 0, margin = margin(t = 20), lineheight = 1.3),
      axis.title = element_text(face = "bold", size = 11),
      axis.text = element_text(size = 10, color = gai_colors$axis_text),
      axis.text.x = element_text(angle = 45, hjust = 1),
      panel.grid.major = element_line(color = gai_colors$grid_lines, size = 0.3),
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = gai_colors$white_background, color = NA),
      plot.background = element_rect(fill = gai_colors$white_background, color = NA),
      strip.text = element_text(face = "bold", size = 11),
      strip.background = element_rect(fill = "grey95", color = "grey80"),
      legend.position = "none",
      plot.margin = margin(15, 15, 70, 15),
      panel.spacing = unit(1, "lines")
    )
}

# ================================================================
# EXACT 101 COUNTRIES AS SPECIFIED
# ================================================================

region_countries_101_exact <- list(
  africa = c(
    "Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cameroon", 
    "Chad", "Comoros", "Djibouti", "Egypt", "Equatorial Guinea", "Ethiopia", "Gabon", 
    "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", "Liberia", "Libya", 
    "Madagascar", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", 
    "Namibia", "Niger", "Nigeria", "Rwanda", "Senegal", "Seychelles", "Sierra Leone", 
    "Somalia", "South Africa", "Sudan", "Togo", "Tunisia", "Zimbabwe"
  ),  # 40 countries
  
  oecd = c(
    "Australia", "Austria", "Belgium", "Canada", "Czech Republic", "Denmark", 
    "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Iceland", 
    "Ireland", "Israel", "Italy", "Japan", "Latvia", "Lithuania", "Luxembourg", 
    "Netherlands", "New Zealand", "Norway", "Poland", "Portugal", "Slovakia", 
    "Slovenia", "Spain", "Sweden", "Switzerland"
  ),  # 30 countries
  
  lac = c(
    "Argentina", "Belize", "Brazil", "Chile", "Colombia", "Costa Rica", 
    "Dominican Republic", "Ecuador", "El Salvador", "Guatemala", "Guyana", 
    "Haiti", "Honduras", "Jamaica", "Mexico", "Nicaragua", "Panama", 
    "Paraguay", "Peru", "Suriname", "Uruguay"
  ),  # 21 countries
  
  asean = c(
    "Brunei", "Cambodia", "Indonesia", "Laos", "Malaysia", "Philippines", 
    "Singapore", "Thailand", "Vietnam"
  ),  # 9 countries
  
  china = c("China")  # 1 country
)

# Enhanced region assignment function
assign_region_101_exact <- function(country) {
  if (is.na(country) || country == "" || is.null(country)) return(NA_character_)
  
  country_clean <- trimws(as.character(country))
  
  # Direct match first
  if (country_clean %in% region_countries_101_exact$africa) return("AFRICA")
  if (country_clean %in% region_countries_101_exact$china) return("CHINA")
  if (country_clean %in% region_countries_101_exact$lac) return("LAC")
  if (country_clean %in% region_countries_101_exact$asean) return("ASEAN")
  if (country_clean %in% region_countries_101_exact$oecd) return("OECD")
  
  # Handle common variations
  country_variations <- list(
    "Czech Republic" = c("Czechia", "Czech Rep.", "Czech"),
    "Guinea-Bissau" = c("Guinea Bissau"),
    "South Africa" = c("South Africa, Rep.", "Republic of South Africa"),
    "Dominican Republic" = c("Dominican Rep."),
    "New Zealand" = c("New Zealand")
  )
  
  for (standard_name in names(country_variations)) {
    if (country_clean %in% country_variations[[standard_name]]) {
      return(assign_region_101_exact(standard_name))
    }
  }
  
  return(NA_character_)
}

# ================================================================
# CORE INDICATORS MAPPING
# ================================================================

core_indicators_mapping <- list(
  "Internet Penetration Index" = c("Internet_Penetration_Index", "internet_penetration", "Internet_Penetration", 
                                   "internet_users", "Internet_Users_Index", "Internet.Penetration.Index"),
  "Mobile Connectivity Index" = c("Mobile_Connectivity_Index", "mobile_connectivity", "Mobile_Connectivity",
                                  "mobile_subscriptions", "Mobile_Subscriptions_Index", "Mobile.Connectivity.Index"),
  "Trade to GDP Ratio Index" = c("Trade_to_GDP_Ratio_Index", "trade_gdp_ratio", "Trade_GDP_Ratio",
                                 "trade_openness", "Trade_Openness_Index", "Trade.to.GDP.Ratio.Index"),
  "Logistics Performance Index" = c("Logistics_Performance_Index", "logistics_performance", "LPI",
                                    "logistics_index", "Logistics_Index", "Logistics.Performance.Index"),
  "Modern Renewables Share Index" = c("Modern_Renewables_Share_Index", "renewables_share", "Renewables_Share",
                                      "renewable_energy", "Renewable_Energy_Index", "Modern.Renewables.Share.Index"),
  "CO2 Intensity Index" = c("CO2_Intensity_Index", "co2_intensity", "CO2_Intensity",
                            "carbon_intensity", "Carbon_Intensity_Index", "CO2.Intensity.Index"),
  "Political Stability Index" = c("Political_Stability_Index", "political_stability", "Political_Stability",
                                  "governance", "Governance_Index", "Political.Stability.Index"),
  "Business Ready Index" = c("Business_Ready_Index", "business_ready", "Business_Ready",
                             "ease_business", "Ease_of_Business_Index", "Business.Ready.Index")
)

# ================================================================
# LOAD CORE PILLARS DATA
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("LOADING CORE PILLARS DATA - COMPLETE PIPELINE v1.3 TOP PERFORMERS")
message("Current Date/Time: ", execution_metadata$datetime_utc)
message("User: ", execution_metadata$user)
message("Target: 8 Core Indicators for 101 countries")
message("Export Path: ", execution_metadata$export_path)
message(paste(rep("=", 80), collapse=""))

# Load the Core_Pillars_Annex_138_Final.csv file
tryCatch({
  Core_Pillars_138 <- read_csv(
    file.path(execution_metadata$clean_data_source_path, "Core_Pillars_Annex_138_Final.csv"), 
    show_col_types = FALSE
  )
  message("Core_Pillars_Annex_138_Final.csv loaded: ", nrow(Core_Pillars_138), " total countries")
}, error = function(e) {
  message("Error loading Core Pillars data: ", e$message)
  stop("ERROR: Could not load Core Pillars data. Please ensure file exists.")
})

# Display column names for debugging
message("\nAvailable columns in dataset (first 20):")
column_names <- names(Core_Pillars_138)
for(i in 1:min(length(column_names), 20)) {
  message("  ", i, ": ", column_names[i])
}
if(length(column_names) > 20) {
  message("  ... and ", length(column_names) - 20, " more columns")
}

# Identify country column
country_col <- NULL
possible_country_cols <- c("Country", "country", "Country_Name", "COUNTRY")
for(col in possible_country_cols) {
  if(col %in% names(Core_Pillars_138)) {
    country_col <- col
    break
  }
}

if(is.null(country_col)) {
  country_col <- names(Core_Pillars_138)[1]
  message("Using first column as country identifier: ", country_col)
} else {
  message("Country column identified: ", country_col)
}

# ================================================================
# IDENTIFY AND MAP CORE INDICATORS
# ================================================================

message("\nIdentifying core indicators...")

# Function to find column by multiple possible names
find_indicator_column <- function(data, indicator_name, possible_names) {
  # First try exact matches
  for (name in possible_names) {
    if (name %in% names(data)) {
      message("Found ", indicator_name, ": ", name)
      return(name)
    }
  }
  
  # Try partial matching with case insensitive
  for (name in possible_names) {
    matches <- names(data)[str_detect(names(data), regex(name, ignore_case = TRUE))]
    if (length(matches) > 0) {
      message("Found ", indicator_name, " (partial match): ", matches[1])
      return(matches[1])
    }
  }
  
  # Try pattern matching for key terms
  key_terms <- list(
    "Internet Penetration Index" = c("internet", "penetration"),
    "Mobile Connectivity Index" = c("mobile", "connectivity"),
    "Trade to GDP Ratio Index" = c("trade", "gdp"),
    "Logistics Performance Index" = c("logistics", "performance", "lpi"),
    "Modern Renewables Share Index" = c("renewable", "renewables"),
    "CO2 Intensity Index" = c("co2", "carbon", "intensity"),
    "Political Stability Index" = c("political", "stability"),
    "Business Ready Index" = c("business", "ready", "ease")
  )
  
  if (indicator_name %in% names(key_terms)) {
    terms <- key_terms[[indicator_name]]
    for (term in terms) {
      matches <- names(data)[str_detect(names(data), regex(term, ignore_case = TRUE))]
      if (length(matches) > 0) {
        message("Found ", indicator_name, " (keyword match): ", matches[1])
        return(matches[1])
      }
    }
  }
  
  message("WARNING: ", indicator_name, " not found")
  return(NULL)
}

# Map all core indicators
indicator_columns <- list()
for (indicator_name in names(core_indicators_mapping)) {
  possible_names <- core_indicators_mapping[[indicator_name]]
  found_column <- find_indicator_column(Core_Pillars_138, indicator_name, possible_names)
  if (!is.null(found_column)) {
    indicator_columns[[indicator_name]] <- found_column
  }
}

message("\nCore indicators mapping results:")
for (indicator_name in names(core_indicators_mapping)) {
  if (indicator_name %in% names(indicator_columns)) {
    message("✓ ", indicator_name, " -> ", indicator_columns[[indicator_name]])
  } else {
    message("✗ ", indicator_name, " -> NOT FOUND")
  }
}

# ================================================================
# PREPARE CLEAN DATASET
# ================================================================

message("\nPreparing clean dataset for target countries...")

# Create clean pillar data
pillar_data_clean <- Core_Pillars_138 %>%
  rename(Country = !!sym(country_col)) %>%
  mutate(Country = trimws(as.character(Country))) %>%
  mutate(Region = sapply(Country, assign_region_101_exact)) %>%
  filter(!is.na(Region) & Region != "") %>%
  arrange(Region, Country)

message("Clean dataset prepared: ", nrow(pillar_data_clean), " countries")

# Verify region distribution
region_breakdown <- pillar_data_clean %>%
  count(Region, name = "Count") %>%
  arrange(match(Region, execution_metadata$target_regions))

message("\nRegion breakdown:")
print(region_breakdown)

# Add normalized versions of indicators
normalized_indicators <- list()

for (indicator_name in names(indicator_columns)) {
  col_name <- indicator_columns[[indicator_name]]
  if (col_name %in% names(pillar_data_clean)) {
    # Convert to numeric
    pillar_data_clean[[col_name]] <- as.numeric(pillar_data_clean[[col_name]])
    
    # Min-max normalization (0-1)
    values <- pillar_data_clean[[col_name]]
    valid_values <- values[!is.na(values) & is.finite(values)]
    
    if (length(valid_values) > 0) {
      min_val <- min(valid_values)
      max_val <- max(valid_values)
      
      if (max_val > min_val) {
        normalized_values <- (values - min_val) / (max_val - min_val)
        normalized_col_name <- paste0(col_name, "_Normalized")
        pillar_data_clean[[normalized_col_name]] <- normalized_values
        normalized_indicators[[indicator_name]] <- normalized_col_name
        message("Normalized ", indicator_name, ": range [", round(min_val, 3), ", ", round(max_val, 3), "]")
      } else {
        pillar_data_clean[[paste0(col_name, "_Normalized")]] <- values
        normalized_indicators[[indicator_name]] <- paste0(col_name, "_Normalized")
        message("WARNING: ", indicator_name, " has constant values")
      }
    } else {
      message("WARNING: No valid values for ", indicator_name)
    }
  } else {
    message("ERROR: Column ", col_name, " not found in data")
  }
}

# ================================================================
# CREATE COUNTRY LISTS CSV
# ================================================================

message("\nCreating country lists CSV...")

country_lists_csv <- pillar_data_clean %>%
  select(Country, Region) %>%
  distinct() %>%
  group_by(Region) %>%
  summarise(
    Countries = paste(sort(Country), collapse = ", "),
    Count = n(),
    .groups = "drop"
  ) %>%
  arrange(match(Region, execution_metadata$target_regions))

# Export country lists
country_csv_file <- file.path(execution_metadata$export_path, "Country_Lists_Complete_Pipeline.csv")
write_csv(country_lists_csv, country_csv_file)
message("Country lists exported: ", basename(country_csv_file))

# ================================================================
# ENHANCED FACETED BOXPLOT CREATION FUNCTION WITH TOP PERFORMER HIGHLIGHTING
# ================================================================

create_faceted_boxplot <- function(data, indicators, figure_title, figure_num, caption_text, filename_base) {
  message("\n--- Creating ", figure_title, " with TOP PERFORMER HIGHLIGHTING ---")
  
  if (length(indicators) != 2) {
    message("ERROR: Exactly 2 indicators required for faceted plot")
    return(NULL)
  }
  
  # Check if both indicators are available
  available_indicators <- indicators[!sapply(indicators, is.null)]
  if (length(available_indicators) != 2) {
    message("ERROR: Not enough valid indicators for ", figure_title)
    message("Available: ", paste(names(available_indicators), collapse = ", "))
    return(NULL)
  }
  
  # Prepare data for plotting
  plot_data_list <- list()
  
  for (i in 1:2) {
    indicator_name <- names(available_indicators)[i]
    col_name <- available_indicators[[i]]
    
    if (col_name %in% names(data)) {
      temp_data <- data %>%
        filter(!is.na(.data[[col_name]]), is.finite(.data[[col_name]])) %>%
        mutate(
          Region = factor(Region, levels = execution_metadata$target_regions),
          Score = .data[[col_name]],
          Indicator = indicator_name,
          Panel = paste("Panel", i, ":", indicator_name)
        ) %>%
        select(Country, Region, Score, Indicator, Panel)
      
      plot_data_list[[i]] <- temp_data
      message("Panel ", i, " (", indicator_name, "): ", nrow(temp_data), " countries")
    } else {
      message("ERROR: Column ", col_name, " not found in data")
      return(NULL)
    }
  }
  
  # Combine data
  plot_data <- bind_rows(plot_data_list)
  
  if (nrow(plot_data) == 0) {
    message("ERROR: No valid data for plotting")
    return(NULL)
  }
  
  # ENHANCED: Add top performer flag for each region-indicator combination
  plot_data <- plot_data %>%
    group_by(Region, Indicator) %>%
    mutate(is_top = Score == max(Score, na.rm = TRUE)) %>%
    ungroup()
  
  # Count top performers for verification
  top_performers <- plot_data %>%
    filter(is_top) %>%
    group_by(Indicator, Region) %>%
    summarise(
      top_countries = paste(Country, collapse = ", "),
      top_score = round(first(Score), 3),
      .groups = "drop"
    )
  
  message("Top performers identified:")
  for (i in 1:nrow(top_performers)) {
    message("  ", top_performers$Indicator[i], " - ", top_performers$Region[i], ": ", 
            top_performers$top_countries[i], " (", top_performers$top_score[i], ")")
  }
  
  # Clean caption text - replace en dash with regular dash to avoid Unicode warnings
  clean_caption <- str_replace_all(caption_text, "–", "-")
  
  # ENHANCED: Create the faceted plot with top performer highlighting
  suppressWarnings({
    p <- ggplot(plot_data, aes(x = Region, y = Score)) +
      # Boxplots with regional fill colors
      geom_boxplot(
        aes(fill = Region),
        alpha = 0.8, 
        width = 0.7, 
        outlier.shape = NA  # Prevent default outliers from showing
      ) +
      # All points as black circles (except top performers)
      geom_jitter(
        data = subset(plot_data, !is_top),
        aes(x = Region, y = Score),
        width = 0.2, alpha = 0.6, size = 1.6, color = "black"
      ) +
      # Top performer points as colored circles with black border
      geom_jitter(
        data = subset(plot_data, is_top),
        aes(x = Region, y = Score, fill = Region),
        width = 0.2, size = 2.4, color = "black", shape = 21
      ) +
      scale_fill_manual(values = gvc_colors) +
      scale_y_continuous(
        name = "NORMALIZED SCORE (0-1)",
        limits = c(0, 1),
        breaks = seq(0, 1, 0.2),
        labels = scales::number_format(accuracy = 0.1),
        expand = expansion(mult = c(0.02, 0.02))
      ) +
      scale_x_discrete(name = NULL) +
      facet_wrap(~ Indicator, ncol = 2, scales = "free_x") +
      labs(
        title = paste("Figure", figure_num, ":", figure_title),
        subtitle = "NORMALIZED INDICATORS (0-1 SCALE) BY REGION",
        caption = clean_caption
      ) +
      theme_gvc_faceted()
  })
  
  message("Enhanced faceted plot with top performer highlighting created successfully")
  return(list(plot = p, filename = filename_base))
}

# ================================================================
# RANKING TABLE CREATION FUNCTION
# ================================================================

create_complete_ranking_table <- function(df, pillar_name, table_number) {
  message("\nCreating COMPLETE ranking table for ", pillar_name, " - ALL COUNTRIES RANKED...")
  
  indicator_cols <- setdiff(names(df), c("Country", "Region"))
  
  if (length(indicator_cols) == 0) {
    message("No indicators found")
    return(NULL)
  }
  
  message("  Processing ", length(indicator_cols), " indicators for COMPLETE ranking")
  
  # Create ranking table with ALL countries
  num_countries <- nrow(df)
  ranking_table <- data.frame(
    Rank = 1:num_countries,
    stringsAsFactors = FALSE
  )
  
  # Process each indicator with COMPLETE ranking (including NAs)
  for (indicator in indicator_cols) {
    message("  Processing indicator: ", indicator)
    
    # Create ranking data INCLUDING countries with NA values
    ranking_data_with_na <- df %>%
      select(Country, Region, !!sym(indicator)) %>%
      mutate(
        indicator_value = as.numeric(!!sym(indicator)),
        has_valid_data = !is.na(indicator_value) & is.finite(indicator_value)
      )
    
    # Separate countries with data and countries with NA
    countries_with_data <- ranking_data_with_na %>%
      filter(has_valid_data) %>%
      arrange(desc(indicator_value)) %>%  # Higher values = better ranks
      mutate(rank_position = row_number())
    
    countries_with_na <- ranking_data_with_na %>%
      filter(!has_valid_data) %>%
      arrange(Country)  # Sort alphabetically for consistency
    
    message("    Countries with data: ", nrow(countries_with_data))
    message("    Countries with NA: ", nrow(countries_with_na))
    
    # Initialize vectors for ALL countries
    country_vector <- rep(NA_character_, num_countries)
    region_vector <- rep(NA_character_, num_countries)
    
    # Fill ranking positions for countries WITH data (ranks 1 to n)
    if (nrow(countries_with_data) > 0) {
      for (i in 1:nrow(countries_with_data)) {
        rank_val <- countries_with_data$rank_position[i]
        if (rank_val >= 1 && rank_val <= num_countries) {
          country_vector[rank_val] <- countries_with_data$Country[i]
          region_vector[rank_val] <- countries_with_data$Region[i]
        }
      }
    }
    
    # Fill remaining positions with countries with NA (ranked lowest)
    if (nrow(countries_with_na) > 0) {
      start_rank <- nrow(countries_with_data) + 1
      for (i in 1:nrow(countries_with_na)) {
        rank_val <- start_rank + i - 1
        if (rank_val <= num_countries) {
          country_vector[rank_val] <- countries_with_na$Country[i]
          region_vector[rank_val] <- countries_with_na$Region[i]
        }
      }
    }
    
    # Add to ranking table
    ranking_table[[indicator]] <- country_vector
    ranking_table[[paste0(indicator, "_Region")]] <- region_vector
    
    countries_ranked_total <- sum(!is.na(country_vector))
    message("    Total countries ranked: ", countries_ranked_total, "/", num_countries)
  }
  
  message("COMPLETE ranking table: ", nrow(ranking_table), " ranks x ", length(indicator_cols), " indicators")
  message("VERIFIED: ALL ", num_countries, " COUNTRIES RANKED (including NAs)")
  
  attr(ranking_table, "pillar_name") <- pillar_name
  attr(ranking_table, "table_number") <- table_number
  attr(ranking_table, "total_countries") <- num_countries
  
  return(ranking_table)
}

# ================================================================
# EXCEL EXPORT WITH FIXED SHEET NAME LENGTH ISSUE
# ================================================================

export_ranking_table_excel <- function(ranking_table, pillar_name, table_number) {
  if (is.null(ranking_table)) return(NULL)
  
  # Clean table (remove region columns for display)
  clean_table <- ranking_table[, !str_detect(names(ranking_table), "_Region$")]
  
  # Get total countries
  total_countries <- attr(ranking_table, "total_countries")
  if (is.null(total_countries)) total_countries <- nrow(clean_table)
  
  # Create Excel file with export path
  pillar_clean <- str_replace_all(tolower(pillar_name), " ", "_")
  excel_file <- file.path(execution_metadata$export_path, "ranking_tables",
                          paste0("Table_", table_number, "_", pillar_clean, "_RANKED_", 
                                 str_replace_all(execution_metadata$datetime_utc, "[:-]", ""), ".xlsx"))
  
  wb <- createWorkbook()
  
  # FIXED: Create shortened sheet name to avoid 31-character limit
  short_pillar_name <- switch(pillar_name,
                              "Technology Readiness" = "Tech Rankings",
                              "Trade & Investment Readiness" = "Trade Rankings", 
                              "Sustainability Readiness" = "Sustain Rankings",
                              "Institutional & Geopolitical Readiness" = "Instit Rankings",
                              paste0("T", table_number, " Rankings"))  # Fallback
  
  sheet_name <- short_pillar_name
  addWorksheet(wb, sheet_name)
  
  # Title and content
  title_text <- paste("Table", table_number, ": Country Rankings on", 
                      pillar_name, "Indicators")
  subtitle_text <- paste("Rankings: 1 = highest performance - 2023 data (", 
                         total_countries, "countries ranked)")
  
  # Metadata
  metadata_text <- paste("Generated:", execution_metadata$datetime_utc, "UTC | User:", execution_metadata$user)
  
  # Write main content
  writeData(wb, sheet_name, title_text, startRow = 1)
  writeData(wb, sheet_name, subtitle_text, startRow = 2)
  writeData(wb, sheet_name, metadata_text, startRow = 3)
  writeData(wb, sheet_name, clean_table, startRow = 5)
  
  # Create styles
  title_style <- createStyle(fontName = "Arial", fontSize = 14, 
                             textDecoration = "bold", halign = "center")
  subtitle_style <- createStyle(fontName = "Arial", fontSize = 11, 
                                halign = "center", textDecoration = "italic")
  metadata_style <- createStyle(fontName = "Arial", fontSize = 9, 
                                halign = "center", fontColour = "gray")
  header_style <- createStyle(fontName = "Arial", fontSize = 12, 
                              fontColour = "white", fgFill = "#1F78B4", 
                              textDecoration = "bold", halign = "center")
  
  # Gray NA style - DARKER for better visibility
  gray_na_style <- createStyle(fgFill = "#A0A0A0", fontColour = "#FFFFFF", 
                               textDecoration = "bold")
  
  # Apply basic styles
  tryCatch({
    addStyle(wb, sheet_name, title_style, rows = 1, cols = 1)
    addStyle(wb, sheet_name, subtitle_style, rows = 2, cols = 1)
    addStyle(wb, sheet_name, metadata_style, rows = 3, cols = 1)
    addStyle(wb, sheet_name, header_style, rows = 5, cols = 1:ncol(clean_table))
  }, error = function(e) {
    message("Warning: Some styles may not have applied: ", e$message)
  })
  
  # Apply regional colors and gray NAs
  tryCatch({
    for (i in 1:nrow(clean_table)) {
      for (j in 2:ncol(clean_table)) {  # Skip Rank column
        country <- clean_table[i, j]
        if (is.na(country) || country == "" || country == "NA") {
          # Apply DARK gray style for NAs/missing countries
          addStyle(wb, sheet_name, gray_na_style, rows = i + 5, cols = j)
        } else {
          # Apply regional color for countries with data
          region_col <- paste0(names(clean_table)[j], "_Region")
          if (region_col %in% names(ranking_table)) {
            region <- ranking_table[i, region_col]
            if (!is.na(region) && region != "") {
              region_color <- excel_region_colors[[region]]
              if (!is.null(region_color)) {
                region_style <- createStyle(fgFill = region_color)
                addStyle(wb, sheet_name, region_style, rows = i + 5, cols = j)
              }
            }
          }
        }
      }
    }
  }, error = function(e) {
    message("Warning: Some colors may not have applied: ", e$message)
  })
  
  # Set column widths
  setColWidths(wb, sheet_name, cols = 1, widths = 8)
  setColWidths(wb, sheet_name, cols = 2:ncol(clean_table), widths = 18)
  
  # Save workbook
  saveWorkbook(wb, excel_file, overwrite = TRUE)
  message("Ranking table exported: ", basename(excel_file))
  
  return(excel_file)
}

# ================================================================
# EXPORT FUNCTION FOR MULTIPLE FORMATS WITH WARNING SUPPRESSION
# ================================================================

export_figure_multiple_formats <- function(plot_obj, width = 12, height = 8, dpi = 320) {
  if (is.null(plot_obj) || is.null(plot_obj$plot)) {
    message("No plot to export")
    return(NULL)
  }
  
  exported_files <- list()
  plot <- plot_obj$plot
  base_name <- plot_obj$filename
  
  # PNG export with warning suppression
  png_file <- file.path(execution_metadata$export_path, "figures", paste0(base_name, ".png"))
  tryCatch({
    suppressWarnings({
      ggsave(png_file, plot, width = width, height = height, dpi = dpi, bg = "white")
    })
    message("PNG exported: ", basename(png_file))
    exported_files$png <- png_file
  }, error = function(e) {
    message("PNG export failed: ", e$message)
  })
  
  # PDF export with warning suppression
  pdf_file <- file.path(execution_metadata$export_path, "figures", paste0(base_name, ".pdf"))
  tryCatch({
    suppressWarnings({
      ggsave(pdf_file, plot, width = width, height = height, bg = "white")
    })
    message("PDF exported: ", basename(pdf_file))
    exported_files$pdf <- pdf_file
  }, error = function(e) {
    message("PDF export failed: ", e$message)
  })
  
  # JPEG export with warning suppression
  jpeg_file <- file.path(execution_metadata$export_path, "figures", paste0(base_name, ".jpeg"))
  tryCatch({
    suppressWarnings({
      ggsave(jpeg_file, plot, width = width, height = height, dpi = dpi, bg = "white")
    })
    message("JPEG exported: ", basename(jpeg_file))
    exported_files$jpeg <- jpeg_file
  }, error = function(e) {
    message("JPEG export failed: ", e$message)
  })
  
  return(exported_files)
}

# ================================================================
# DEFINE FIGURE SPECIFICATIONS WITH ENHANCED SOURCE TEXTS
# ================================================================

# Build figure specs dynamically based on available indicators
figure_specs <- list()

# Figure 1: Technology Readiness
tech_indicators <- list(
  "Internet Penetration Index" = NULL,
  "Mobile Connectivity Index" = NULL
)
if ("Internet Penetration Index" %in% names(normalized_indicators)) {
  tech_indicators[["Internet Penetration Index"]] <- normalized_indicators[["Internet Penetration Index"]]
}
if ("Mobile Connectivity Index" %in% names(normalized_indicators)) {
  tech_indicators[["Mobile Connectivity Index"]] <- normalized_indicators[["Mobile Connectivity Index"]]
}

figure_specs[[1]] <- list(
  title = "Technology Readiness",
  figure_num = 1,
  indicators = tech_indicators,
  caption = "Source: Author's calculations using institutional databases (ITU, GSMA).\nScores are min-max normalized (0-1); higher values indicate better performance.\nBlack circles represent individual country scores; the colored circle indicates the top-performing country in each region for this indicator.",
  filename = "Figure_1_technology_readiness"
)

# Figure 2: Trade & Investment Readiness
trade_indicators <- list(
  "Trade to GDP Ratio Index" = NULL,
  "Logistics Performance Index" = NULL
)
if ("Trade to GDP Ratio Index" %in% names(normalized_indicators)) {
  trade_indicators[["Trade to GDP Ratio Index"]] <- normalized_indicators[["Trade to GDP Ratio Index"]]
}
if ("Logistics Performance Index" %in% names(normalized_indicators)) {
  trade_indicators[["Logistics Performance Index"]] <- normalized_indicators[["Logistics Performance Index"]]
}

figure_specs[[2]] <- list(
  title = "Trade & Investment Readiness",
  figure_num = 2,
  indicators = trade_indicators,
  caption = "Source: Author's calculations using institutional databases (World Bank).\nScores are min-max normalized (0-1); higher values indicate better performance.\nBlack circles represent individual country scores; the colored circle indicates the top-performing country in each region for this indicator.",
  filename = "Figure_2_trade_investment_readiness"
)

# Figure 3: Sustainability Readiness
sustain_indicators <- list(
  "Modern Renewables Share Index" = NULL,
  "CO2 Intensity Index" = NULL
)
if ("Modern Renewables Share Index" %in% names(normalized_indicators)) {
  sustain_indicators[["Modern Renewables Share Index"]] <- normalized_indicators[["Modern Renewables Share Index"]]
}
if ("CO2 Intensity Index" %in% names(normalized_indicators)) {
  sustain_indicators[["CO2 Intensity Index"]] <- normalized_indicators[["CO2 Intensity Index"]]
}

figure_specs[[3]] <- list(
  title = "Sustainability Readiness",
  figure_num = 3,
  indicators = sustain_indicators,
  caption = "Source: Author's calculations using institutional databases (IRENA, World Bank, EDGAR).\nScores are min-max normalized (0-1); higher values indicate better performance.\nNote: For CO2 Intensity Index, a higher score = lower emissions (better).\nBlack circles represent individual country scores; the colored circle indicates the top-performing country in each region for this indicator.",
  filename = "Figure_3_sustainability_readiness"
)

# Figure 4: Institutional & Geopolitical Readiness
institutional_indicators <- list(
  "Political Stability Index" = NULL,
  "Business Ready Index" = NULL
)
if ("Political Stability Index" %in% names(normalized_indicators)) {
  institutional_indicators[["Political Stability Index"]] <- normalized_indicators[["Political Stability Index"]]
}
if ("Business Ready Index" %in% names(normalized_indicators)) {
  institutional_indicators[["Business Ready Index"]] <- normalized_indicators[["Business Ready Index"]]
}

figure_specs[[4]] <- list(
  title = "Institutional & Geopolitical Readiness",
  figure_num = 4,
  indicators = institutional_indicators,
  caption = "Source: Author's calculations using institutional databases (World Bank).\nScores are min-max normalized (0-1); higher values indicate better performance.\nBlack circles represent individual country scores; the colored circle indicates the top-performing country in each region for this indicator.",
  filename = "Figure_4_institutional_geopolitical_readiness"
)

# ================================================================
# EXECUTE COMPLETE PIPELINE
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("EXECUTING COMPLETE GVC AFRICA PIPELINE WITH TOP PERFORMER HIGHLIGHTING")
message("Timestamp: ", execution_metadata$datetime_utc)
message("Version: ", execution_metadata$version)
message("Countries: ", nrow(pillar_data_clean))
message("Export Path: ", execution_metadata$export_path)
message(paste(rep("=", 80), collapse=""))

# Initialize results storage
all_exported_files <- list()
all_ranking_tables <- list()

# Process each figure specification
for (i in 1:length(figure_specs)) {
  spec <- figure_specs[[i]]
  
  message("\n", paste(rep("-", 60), collapse=""))
  message("PROCESSING PILLAR ", i, "/", length(figure_specs), ": ", spec$title)
  message("Figure: ", spec$figure_num, " | Table: ", i)
  message("Indicators: ", paste(names(spec$indicators), collapse = ", "))
  message(paste(rep("-", 60), collapse=""))
  
  # Filter out NULL indicators
  valid_indicators <- spec$indicators[!sapply(spec$indicators, is.null)]
  
  if (length(valid_indicators) == 2) {
    # Create faceted boxplot with top performer highlighting
    plot_obj <- create_faceted_boxplot(
      data = pillar_data_clean,
      indicators = valid_indicators,
      figure_title = spec$title,
      figure_num = spec$figure_num,
      caption_text = spec$caption,
      filename_base = spec$filename
    )
    
    if (!is.null(plot_obj)) {
      exported_files <- export_figure_multiple_formats(plot_obj)
      all_exported_files[[length(all_exported_files) + 1]] <- exported_files
      message("SUCCESS: ", spec$title, " figure created and exported with top performer highlighting")
      
      # Create ranking table for the same indicators
      # Prepare data with only the relevant normalized indicators
      ranking_data <- pillar_data_clean %>%
        select(Country, Region, all_of(unlist(valid_indicators)))
      
      # Create ranking table
      ranking_table <- create_complete_ranking_table(ranking_data, spec$title, i)
      
      if (!is.null(ranking_table)) {
        # Export ranking table to Excel
        excel_file <- export_ranking_table_excel(ranking_table, spec$title, i)
        all_ranking_tables[[spec$title]] <- list(
          table = ranking_table,
          excel_file = excel_file
        )
        message("SUCCESS: ", spec$title, " ranking table created and exported")
      } else {
        message("FAILED: ", spec$title, " ranking table could not be created")
      }
      
    } else {
      message("FAILED: ", spec$title, " figure could not be created")
      all_exported_files[[length(all_exported_files) + 1]] <- NULL
    }
  } else {
    message("SKIPPED: ", spec$title, " - insufficient valid indicators (", length(valid_indicators), "/2)")
    all_exported_files[[length(all_exported_files) + 1]] <- NULL
  }
}

# ================================================================
# FINAL SUMMARY AND VALIDATION
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("COMPLETE GVC AFRICA PIPELINE FINISHED - TOP PERFORMERS VERSION")
message(paste(rep("=", 80), collapse=""))

message("\nFINAL SUMMARY:")
message("  Timestamp: ", execution_metadata$datetime_utc)
message("  User: ", execution_metadata$user)
message("  Version: ", execution_metadata$version)
message("  Countries analyzed: ", nrow(pillar_data_clean))
message("  Regions: ", paste(execution_metadata$target_regions, collapse = ", "))

# Count successful outputs
successful_figures <- sum(!sapply(all_exported_files, is.null))
successful_rankings <- length(all_ranking_tables)

message("  Figures created: ", successful_figures, "/", length(figure_specs))
message("  Ranking tables created: ", successful_rankings, "/", length(figure_specs))

message("\nENHANCED FEATURES:")
message("✓ Y-axis label: 'NORMALIZED SCORE (0-1)'")
message("✓ Subtitle: 'NORMALIZED INDICATORS (0-1 SCALE) BY REGION'")
message("✓ Top performer highlighting: Colored circles with black borders")
message("✓ Regular countries: Black circles")
message("✓ Enhanced captions explaining dot color logic")
message("✓ Top performer identification and logging")

message("\nREGION SUMMARY:")
final_region_summary <- pillar_data_clean %>%
  group_by(Region) %>%
  summarise(Countries = n(), .groups = "drop") %>%
  arrange(match(Region, execution_metadata$target_regions))
print(final_region_summary)

message("\nEXPORTED FILES:")
total_files <- 0

# Count figure files
for (i in 1:length(all_exported_files)) {
  files <- all_exported_files[[i]]
  if (!is.null(files)) {
    figure_name <- paste("Figure", i)
    message(figure_name, ":")
    if (!is.null(files$png)) { message("  PNG: ", basename(files$png)); total_files <- total_files + 1 }
    if (!is.null(files$pdf)) { message("  PDF: ", basename(files$pdf)); total_files <- total_files + 1 }
    if (!is.null(files$jpeg)) { message("  JPEG: ", basename(files$jpeg)); total_files <- total_files + 1 }
  }
}

# Count ranking files
for (pillar_name in names(all_ranking_tables)) {
  ranking_info <- all_ranking_tables[[pillar_name]]
  if (!is.null(ranking_info$excel_file)) {
    message("Ranking Table (", pillar_name, "): ", basename(ranking_info$excel_file))
    total_files <- total_files + 1
  }
}

message("Supporting CSV: Country_Lists_Complete_Pipeline.csv")
total_files <- total_files + 1

message("\nEXPORT LOCATIONS:")
message("  Figures: ", file.path(execution_metadata$export_path, "figures"))
message("  Rankings: ", file.path(execution_metadata$export_path, "ranking_tables"))
message("  Country Lists: ", execution_metadata$export_path)

message("\nPROJECT STATUS:")
message("✓ Data loaded and validated")
message("✓ Countries filtered to target specification")
message("✓ Core indicators identified and normalized")
message("✓ Faceted boxplots created (", successful_figures, "/", length(figure_specs), ")")
message("✓ Ranking tables created (", successful_rankings, "/", length(figure_specs), ")")
message("✓ Files exported in multiple formats")
message("✓ Total files exported: ", total_files)
message("✓ Top performer highlighting implemented")

if (successful_figures == length(figure_specs) && successful_rankings == length(figure_specs)) {
  message("\n", paste(rep("=", 80), collapse=""))
  message("GVC AFRICA COMPLETE PIPELINE v1.3 - TOP PERFORMERS SUCCESS!")
  message("All faceted analyses and ranking tables ready for publication")
  message("Enhanced visualization: Top performers highlighted in regional colors")
  message("Caption guidance: Black circles = all countries, colored circles = top performers")
  message(paste(rep("=", 80), collapse=""))
} else {
  message("\n", paste(rep("=", 80), collapse=""))
  message("GVC AFRICA COMPLETE PIPELINE v1.3 - PARTIAL SUCCESS!")
  message("Some outputs may need manual review due to missing indicators")
  message("Successful figures: ", successful_figures, "/", length(figure_specs))
  message("Successful rankings: ", successful_rankings, "/", length(figure_specs))
  message(paste(rep("=", 80), collapse=""))
}





###################################################################################################################
###################################################################################################################
##################################################################################################################















# ================================================================
# Statistical Description Analysis for GAI Editorial Project with Comprehensive Rankings
# Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-06-06 13:15:15
# Current User's Login: Canomoncada
# Version: Statistical_Description_v2.1_GVC_AFRICA_EXPORT
# ================================================================

# Load required libraries
library(readr)
library(dplyr)
library(openxlsx)
library(tidyr)
library(fs)
library(stringr)

# Set execution metadata
execution_metadata <- list(
  datetime_utc = "2025-06-06 13:15:15",
  user = "Canomoncada",
  version = "Statistical_Description_v2.1_GVC_AFRICA_EXPORT",
  analysis_type = "Comprehensive Statistical Summary with Four-Pillar Rankings",
  data_source = "Clean GAI Editorial Indicators",
  export_path = "/Volumes/VALEN/Africa:LAC/Harmonization/GVC AFRICA"
)

message("Statistical Description Analysis with Comprehensive Rankings Started")
message("Timestamp: ", execution_metadata$datetime_utc)
message("User: ", execution_metadata$user)
message("Export Path: ", execution_metadata$export_path)

# ================================================================
# CREATE EXPORT DIRECTORY
# ================================================================

# Create the export directory if it doesn't exist
tryCatch({
  fs::dir_create(execution_metadata$export_path, recurse = TRUE)
  fs::dir_create(file.path(execution_metadata$export_path, "gai_editorial_analysis"), recurse = TRUE)
  fs::dir_create(file.path(execution_metadata$export_path, "comprehensive_rankings"), recurse = TRUE)
  message("✓ Export directories created/verified: ", execution_metadata$export_path)
  message("  - Main: ", execution_metadata$export_path)
  message("  - GAI Editorial: ", file.path(execution_metadata$export_path, "gai_editorial_analysis"))
  message("  - Rankings: ", file.path(execution_metadata$export_path, "comprehensive_rankings"))
}, error = function(e) {
  message("✗ Error creating export directory: ", e$message)
  stop("Cannot proceed without export directory")
})

# ================================================================
# LOAD CLEANED DATASETS
# ================================================================

message("\nLoading cleaned datasets...")

# Load the cleaned datasets with error handling
tryCatch({
  tech <- read_csv("Technology_Indicators_CLEAN.csv")
  message("✓ Technology_Indicators_CLEAN.csv loaded: ", nrow(tech), " countries")
}, error = function(e) {
  message("✗ Error loading Technology data: ", e$message)
  tech <- NULL
})

tryCatch({
  sustain <- read_csv("Sustainability_Indicators_CLEAN.csv")
  message("✓ Sustainability_Indicators_CLEAN.csv loaded: ", nrow(sustain), " countries")
}, error = function(e) {
  message("✗ Error loading Sustainability data: ", e$message)
  sustain <- NULL
})

tryCatch({
  geo <- read_csv("Geopolitical_Indicators_CLEAN.csv")
  message("✓ Geopolitical_Indicators_CLEAN.csv loaded: ", nrow(geo), " countries")
}, error = function(e) {
  message("✗ Error loading Geopolitical data: ", e$message)
  geo <- NULL
})

# Verify all data is loaded
if (is.null(tech) || is.null(sustain) || is.null(geo)) {
  stop("ERROR: Could not load all clean data files. Please ensure files exist in working directory.")
}

# ================================================================
# ENHANCED REGION MAPPING FUNCTION (GVC AFRICA ALIGNED)
# ================================================================

# Define region assignments based on GAI Editorial standards (aligned with GVC pipeline)
assign_region <- function(country) {
  if (is.na(country) || country == "") return(NA_character_)
  
  # Exact 101 countries as specified in GVC pipeline
  africa_countries <- c(
    "Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cameroon", 
    "Chad", "Comoros", "Djibouti", "Egypt", "Equatorial Guinea", "Ethiopia", "Gabon", 
    "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", "Liberia", "Libya", 
    "Madagascar", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", 
    "Namibia", "Niger", "Nigeria", "Rwanda", "Senegal", "Seychelles", "Sierra Leone", 
    "Somalia", "South Africa", "Sudan", "Togo", "Tunisia", "Zimbabwe"
  )
  
  oecd_countries <- c(
    "Australia", "Austria", "Belgium", "Canada", "Czech Republic", "Denmark", 
    "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Iceland", 
    "Ireland", "Israel", "Italy", "Japan", "Latvia", "Lithuania", "Luxembourg", 
    "Netherlands", "New Zealand", "Norway", "Poland", "Portugal", "Slovakia", 
    "Slovenia", "Spain", "Sweden", "Switzerland"
  )
  
  lac_countries <- c(
    "Argentina", "Belize", "Brazil", "Chile", "Colombia", "Costa Rica", 
    "Dominican Republic", "Ecuador", "El Salvador", "Guatemala", "Guyana", 
    "Haiti", "Honduras", "Jamaica", "Mexico", "Nicaragua", "Panama", 
    "Paraguay", "Peru", "Suriname", "Uruguay"
  )
  
  asean_countries <- c(
    "Brunei", "Cambodia", "Indonesia", "Laos", "Malaysia", 
    "Philippines", "Singapore", "Thailand", "Vietnam"
  )
  
  china_countries <- c("China")
  
  # Assign regions with priority order (matches GVC Africa pipeline)
  if (country %in% africa_countries) {
    return("AFRICA")
  } else if (country %in% china_countries) {
    return("CHINA")
  } else if (country %in% lac_countries) {
    return("LAC")
  } else if (country %in% asean_countries) {
    return("ASEAN")
  } else if (country %in% oecd_countries) {
    return("OECD")
  } else {
    return("OTHER")
  }
}

# Add Region column to all datasets
tech$Region <- sapply(tech$Country, assign_region)
sustain$Region <- sapply(sustain$Country, assign_region)
geo$Region <- sapply(geo$Country, assign_region)

message("✓ Region assignments completed for all datasets using GVC AFRICA pipeline standards")

# ================================================================
# NORMALIZE INDICATORS FOR COMPREHENSIVE RANKING
# ================================================================

message("\n", paste(rep("=", 60), collapse=""))
message("NORMALIZING INDICATORS FOR COMPREHENSIVE RANKING")
message(paste(rep("=", 60), collapse=""))

# Function to normalize indicators (min-max scaling to 0-1)
normalize_indicators <- function(df, pillar_name) {
  message("Normalizing ", pillar_name, " indicators...")
  
  # Get numeric columns (excluding Country and Region)
  numeric_cols <- names(df)[sapply(df, is.numeric)]
  
  for (col in numeric_cols) {
    values <- df[[col]]
    valid_values <- values[!is.na(values) & is.finite(values)]
    
    if (length(valid_values) > 0) {
      min_val <- min(valid_values)
      max_val <- max(valid_values)
      
      if (max_val > min_val) {
        normalized_values <- (values - min_val) / (max_val - min_val)
        normalized_col_name <- paste0(col, "_Normalized")
        df[[normalized_col_name]] <- normalized_values
        message("  ✓ Normalized ", col, ": range [", round(min_val, 3), ", ", round(max_val, 3), "]")
      } else {
        df[[paste0(col, "_Normalized")]] <- values
        message("  ! WARNING: ", col, " has constant values")
      }
    } else {
      message("  ! WARNING: No valid values for ", col)
    }
  }
  
  return(df)
}

# Normalize all datasets
tech_normalized <- normalize_indicators(tech, "Technology")
sustain_normalized <- normalize_indicators(sustain, "Sustainability")
geo_normalized <- normalize_indicators(geo, "Geopolitical")

# ================================================================
# STATISTICAL DESCRIPTION FUNCTION
# ================================================================

# Function to get comprehensive summary stats for all numeric columns
describe_data <- function(df, pillar_name) {
  cat("===== Statistical Description for", pillar_name, "=====\n")
  
  # Get numeric columns (excluding Country and Region)
  numeric_cols <- df[, sapply(df, is.numeric)]
  
  if (ncol(numeric_cols) == 0) {
    cat("No numeric columns found\n\n")
    return(NULL)
  }
  
  # Calculate comprehensive statistics
  stats <- data.frame(
    Indicator = names(numeric_cols),
    N_Valid = sapply(numeric_cols, function(x) sum(!is.na(x))),
    N_Missing = sapply(numeric_cols, function(x) sum(is.na(x))),
    Mean = sapply(numeric_cols, mean, na.rm = TRUE),
    Median = sapply(numeric_cols, median, na.rm = TRUE),
    SD = sapply(numeric_cols, sd, na.rm = TRUE),
    Min = sapply(numeric_cols, min, na.rm = TRUE),
    Max = sapply(numeric_cols, max, na.rm = TRUE),
    Q1 = sapply(numeric_cols, quantile, 0.25, na.rm = TRUE),
    Q3 = sapply(numeric_cols, quantile, 0.75, na.rm = TRUE),
    Coverage_Pct = round(sapply(numeric_cols, function(x) sum(!is.na(x)) / length(x) * 100), 1),
    stringsAsFactors = FALSE
  )
  
  # Round numeric values for better display
  stats[, c("Mean", "Median", "SD", "Min", "Max", "Q1", "Q3")] <- 
    round(stats[, c("Mean", "Median", "SD", "Min", "Max", "Q1", "Q3")], 4)
  
  print(stats, row.names = FALSE)
  cat("\n")
  
  return(stats)
}

# ================================================================
# REGIONAL SUMMARY FUNCTION
# ================================================================

# Function to create regional summaries
create_regional_summary <- function(df, pillar_name) {
  cat("===== Regional Summary for", pillar_name, "=====\n")
  
  if (!"Region" %in% names(df)) {
    cat("No Region column found\n\n")
    return(NULL)
  }
  
  # Regional summary with comprehensive statistics
  regional_summary <- df %>% 
    group_by(Region) %>% 
    summarise(
      N_Countries = n(),
      across(where(is.numeric), 
             list(
               mean = ~round(mean(.x, na.rm = TRUE), 4),
               median = ~round(median(.x, na.rm = TRUE), 4),
               sd = ~round(sd(.x, na.rm = TRUE), 4),
               min = ~round(min(.x, na.rm = TRUE), 4),
               max = ~round(max(.x, na.rm = TRUE), 4),
               n_missing = ~sum(is.na(.x)),
               coverage_pct = ~round(sum(!is.na(.x)) / n() * 100, 1)
             )),
      .groups = 'drop'
    )
  
  print(regional_summary)
  cat("\n")
  
  return(regional_summary)
}

# ================================================================
# COMPREHENSIVE FOUR-PILLAR RANKING SYSTEM (GVC AFRICA ALIGNED)
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("CREATING COMPREHENSIVE FOUR-PILLAR RANKING SYSTEM - GVC AFRICA ALIGNED")
message(paste(rep("=", 80), collapse=""))

# Define pillar mapping (using normalized columns)
create_comprehensive_rankings <- function() {
  # Merge all datasets on Country and Region
  message("Merging datasets for comprehensive analysis...")
  
  # Get base columns from each dataset
  tech_base <- tech_normalized %>% select(Country, Region)
  sustain_base <- sustain_normalized %>% select(Country, Region)
  geo_base <- geo_normalized %>% select(Country, Region)
  
  # Get all unique countries
  all_countries <- unique(c(tech_base$Country, sustain_base$Country, geo_base$Country))
  
  # Create comprehensive dataset with all countries
  comprehensive_data <- data.frame(
    Country = all_countries,
    stringsAsFactors = FALSE
  )
  
  # Add regions
  comprehensive_data$Region <- sapply(comprehensive_data$Country, assign_region)
  
  # Merge normalized indicators from each pillar
  # Technology indicators
  tech_normalized_cols <- names(tech_normalized)[str_detect(names(tech_normalized), "_Normalized$")]
  if (length(tech_normalized_cols) > 0) {
    tech_for_merge <- tech_normalized %>% select(Country, all_of(tech_normalized_cols))
    comprehensive_data <- comprehensive_data %>% left_join(tech_for_merge, by = "Country")
    message("  ✓ Added ", length(tech_normalized_cols), " normalized Technology indicators")
  }
  
  # Sustainability indicators
  sustain_normalized_cols <- names(sustain_normalized)[str_detect(names(sustain_normalized), "_Normalized$")]
  if (length(sustain_normalized_cols) > 0) {
    sustain_for_merge <- sustain_normalized %>% select(Country, all_of(sustain_normalized_cols))
    comprehensive_data <- comprehensive_data %>% left_join(sustain_for_merge, by = "Country")
    message("  ✓ Added ", length(sustain_normalized_cols), " normalized Sustainability indicators")
  }
  
  # Geopolitical indicators
  geo_normalized_cols <- names(geo_normalized)[str_detect(names(geo_normalized), "_Normalized$")]
  if (length(geo_normalized_cols) > 0) {
    geo_for_merge <- geo_normalized %>% select(Country, all_of(geo_normalized_cols))
    comprehensive_data <- comprehensive_data %>% left_join(geo_for_merge, by = "Country")
    message("  ✓ Added ", length(geo_normalized_cols), " normalized Geopolitical indicators")
  }
  
  # Calculate pillar scores (average of normalized indicators in each pillar)
  message("Computing composite pillar scores...")
  
  if (length(tech_normalized_cols) > 0) {
    comprehensive_data$Technology_Readiness <- rowMeans(
      comprehensive_data[, tech_normalized_cols, drop = FALSE], 
      na.rm = TRUE
    )
    comprehensive_data$Technology_Readiness[is.nan(comprehensive_data$Technology_Readiness)] <- NA
    message("  ✓ Technology Readiness score computed")
  }
  
  if (length(sustain_normalized_cols) > 0) {
    comprehensive_data$Sustainability_Readiness <- rowMeans(
      comprehensive_data[, sustain_normalized_cols, drop = FALSE], 
      na.rm = TRUE
    )
    comprehensive_data$Sustainability_Readiness[is.nan(comprehensive_data$Sustainability_Readiness)] <- NA
    message("  ✓ Sustainability Readiness score computed")
  }
  
  if (length(geo_normalized_cols) > 0) {
    comprehensive_data$Geopolitical_Readiness <- rowMeans(
      comprehensive_data[, geo_normalized_cols, drop = FALSE], 
      na.rm = TRUE
    )
    comprehensive_data$Geopolitical_Readiness[is.nan(comprehensive_data$Geopolitical_Readiness)] <- NA
    message("  ✓ Geopolitical Readiness score computed")
  }
  
  # Calculate overall readiness score
  pillar_score_cols <- c()
  if ("Technology_Readiness" %in% names(comprehensive_data)) pillar_score_cols <- c(pillar_score_cols, "Technology_Readiness")
  if ("Sustainability_Readiness" %in% names(comprehensive_data)) pillar_score_cols <- c(pillar_score_cols, "Sustainability_Readiness")
  if ("Geopolitical_Readiness" %in% names(comprehensive_data)) pillar_score_cols <- c(pillar_score_cols, "Geopolitical_Readiness")
  
  if (length(pillar_score_cols) > 0) {
    comprehensive_data$Overall_Readiness <- rowMeans(
      comprehensive_data[, pillar_score_cols, drop = FALSE], 
      na.rm = TRUE
    )
    comprehensive_data$Overall_Readiness[is.nan(comprehensive_data$Overall_Readiness)] <- NA
    message("  ✓ Overall Readiness score computed from ", length(pillar_score_cols), " pillars")
  }
  
  # Create rankings
  message("Creating rankings...")
  
  if ("Technology_Readiness" %in% names(comprehensive_data)) {
    comprehensive_data$Tech_Rank <- rank(-comprehensive_data$Technology_Readiness, ties.method = "min", na.last = "keep")
  }
  
  if ("Sustainability_Readiness" %in% names(comprehensive_data)) {
    comprehensive_data$Sustain_Rank <- rank(-comprehensive_data$Sustainability_Readiness, ties.method = "min", na.last = "keep")
  }
  
  if ("Geopolitical_Readiness" %in% names(comprehensive_data)) {
    comprehensive_data$Geo_Rank <- rank(-comprehensive_data$Geopolitical_Readiness, ties.method = "min", na.last = "keep")
  }
  
  if ("Overall_Readiness" %in% names(comprehensive_data)) {
    comprehensive_data$Overall_Rank <- rank(-comprehensive_data$Overall_Readiness, ties.method = "min", na.last = "keep")
  }
  
  # Filter to focus on target regions (GVC AFRICA aligned)
  target_regions <- c("AFRICA", "OECD", "CHINA", "LAC", "ASEAN")
  comprehensive_final <- comprehensive_data %>%
    filter(Region %in% target_regions) %>%
    arrange(Overall_Rank)
  
  message("Comprehensive ranking table created: ", nrow(comprehensive_final), " countries")
  message("Target regions: ", paste(target_regions, collapse = ", "))
  
  return(comprehensive_final)
}

# Create comprehensive rankings
comprehensive_rankings <- create_comprehensive_rankings()

# ================================================================
# RUN STATISTICAL DESCRIPTIONS
# ================================================================

message("\n", paste(rep("=", 60), collapse=""))
message("RUNNING STATISTICAL DESCRIPTIONS")
message(paste(rep("=", 60), collapse=""))

# Run comprehensive analysis for each pillar
tech_stats <- describe_data(tech, "Technology")
sustain_stats <- describe_data(sustain, "Sustainability")
geo_stats <- describe_data(geo, "Geopolitical")

# ================================================================
# RUN REGIONAL SUMMARIES
# ================================================================

message("\n", paste(rep("=", 60), collapse=""))
message("RUNNING REGIONAL SUMMARIES")
message(paste(rep("=", 60), collapse=""))

# Run regional analysis for each pillar
tech_regional <- create_regional_summary(tech, "Technology")
sustain_regional <- create_regional_summary(sustain, "Sustainability")
geo_regional <- create_regional_summary(geo, "Geopolitical")

# ================================================================
# ENHANCED EXCEL EXPORT WITH COMPREHENSIVE RANKINGS - GVC AFRICA PATH
# ================================================================

message("\n", paste(rep("=", 60), collapse=""))
message("EXPORTING ENHANCED RESULTS WITH COMPREHENSIVE RANKINGS")
message("Export Directory: ", execution_metadata$export_path)
message("GAI Editorial Subdirectory: ", file.path(execution_metadata$export_path, "gai_editorial_analysis"))
message(paste(rep("=", 60), collapse=""))

# Regional colors for Excel styling (GVC AFRICA aligned)
excel_region_colors <- list(
  "LAC" = "#FFB366",        # Orange
  "OECD" = "#66B3FF",       # Blue
  "ASEAN" = "#66CC66",      # Green
  "CHINA" = "#FF6666",      # Red
  "AFRICA" = "#FFD700",     # Yellow
  "OTHER" = "#CCCCCC"       # Gray
)

# Create comprehensive Excel workbook with enhanced styling
create_enhanced_statistical_workbook <- function() {
  wb <- createWorkbook()
  
  # Define styles
  title_style <- createStyle(fontName = "Arial", fontSize = 14, textDecoration = "bold", halign = "center")
  subtitle_style <- createStyle(fontName = "Arial", fontSize = 11, halign = "center", textDecoration = "italic")
  header_style <- createStyle(fontName = "Arial", fontSize = 11, fontColour = "white", fgFill = "#1F78B4", textDecoration = "bold", halign = "center")
  metadata_style <- createStyle(fontName = "Arial", fontSize = 9, halign = "center", fontColour = "gray")
  
  # Add metadata sheet
  addWorksheet(wb, "Metadata")
  metadata_df <- data.frame(
    Parameter = c("Analysis Date", "User", "Version", "Analysis Type", "Data Source", "Export Path", 
                  "Technology Indicators", "Sustainability Indicators", "Geopolitical Indicators", "Total Countries"),
    Value = c(execution_metadata$datetime_utc, execution_metadata$user, 
              execution_metadata$version, execution_metadata$analysis_type, 
              execution_metadata$data_source, execution_metadata$export_path,
              ncol(tech) - 2, ncol(sustain) - 2, ncol(geo) - 2, nrow(comprehensive_rankings)),
    stringsAsFactors = FALSE
  )
  writeData(wb, "Metadata", metadata_df)
  addStyle(wb, "Metadata", header_style, rows = 1, cols = 1:2)
  
  # ENHANCED: Add comprehensive rankings sheet
  addWorksheet(wb, "Comprehensive_Rankings")
  
  # Title and content for comprehensive rankings
  title_text <- "GAI Editorial - Comprehensive Multi-Pillar Readiness Rankings"
  subtitle_text <- paste("Rankings based on normalized indicators (0-1 scale) - ", 
                         format(Sys.Date(), "%Y"), " data (", 
                         nrow(comprehensive_rankings), " countries)")
  methodology_text <- "Methodology: Each pillar score = average of constituent normalized indicators. Overall Readiness = average of all pillar scores."
  
  writeData(wb, "Comprehensive_Rankings", title_text, startRow = 1)
  writeData(wb, "Comprehensive_Rankings", subtitle_text, startRow = 2)
  writeData(wb, "Comprehensive_Rankings", methodology_text, startRow = 3)
  writeData(wb, "Comprehensive_Rankings", comprehensive_rankings, startRow = 5)
  
  # Apply styles to comprehensive rankings
  addStyle(wb, "Comprehensive_Rankings", title_style, rows = 1, cols = 1)
  addStyle(wb, "Comprehensive_Rankings", subtitle_style, rows = 2, cols = 1)
  addStyle(wb, "Comprehensive_Rankings", metadata_style, rows = 3, cols = 1)
  addStyle(wb, "Comprehensive_Rankings", header_style, rows = 5, cols = 1:ncol(comprehensive_rankings))
  
  # Apply regional colors to comprehensive rankings
  tryCatch({
    for (i in 1:nrow(comprehensive_rankings)) {
      region <- comprehensive_rankings$Region[i]
      if (!is.na(region) && region %in% names(excel_region_colors)) {
        region_color <- excel_region_colors[[region]]
        region_style <- createStyle(fgFill = region_color)
        addStyle(wb, "Comprehensive_Rankings", region_style, rows = i + 5, cols = 1:2)  # Country and Region columns
      }
    }
  }, error = function(e) {
    message("Warning: Regional colors may not have applied to comprehensive rankings: ", e$message)
  })
  
  # Add statistical summaries
  if (!is.null(tech_stats)) {
    addWorksheet(wb, "Technology_Stats")
    writeData(wb, "Technology_Stats", "Technology Indicators - Statistical Summary", startRow = 1)
    writeData(wb, "Technology_Stats", tech_stats, startRow = 3)
    addStyle(wb, "Technology_Stats", title_style, rows = 1, cols = 1)
    addStyle(wb, "Technology_Stats", header_style, rows = 3, cols = 1:ncol(tech_stats))
  }
  
  if (!is.null(sustain_stats)) {
    addWorksheet(wb, "Sustainability_Stats")
    writeData(wb, "Sustainability_Stats", "Sustainability Indicators - Statistical Summary", startRow = 1)
    writeData(wb, "Sustainability_Stats", sustain_stats, startRow = 3)
    addStyle(wb, "Sustainability_Stats", title_style, rows = 1, cols = 1)
    addStyle(wb, "Sustainability_Stats", header_style, rows = 3, cols = 1:ncol(sustain_stats))
  }
  
  if (!is.null(geo_stats)) {
    addWorksheet(wb, "Geopolitical_Stats")
    writeData(wb, "Geopolitical_Stats", "Geopolitical Indicators - Statistical Summary", startRow = 1)
    writeData(wb, "Geopolitical_Stats", geo_stats, startRow = 3)
    addStyle(wb, "Geopolitical_Stats", title_style, rows = 1, cols = 1)
    addStyle(wb, "Geopolitical_Stats", header_style, rows = 3, cols = 1:ncol(geo_stats))
  }
  
  # Add regional summaries (truncated for Excel compatibility)
  if (!is.null(tech_regional)) {
    addWorksheet(wb, "Technology_Regional")
    tech_regional_truncated <- tech_regional[, 1:min(20, ncol(tech_regional))]
    writeData(wb, "Technology_Regional", "Technology Indicators - Regional Summary", startRow = 1)
    writeData(wb, "Technology_Regional", tech_regional_truncated, startRow = 3)
    addStyle(wb, "Technology_Regional", title_style, rows = 1, cols = 1)
    addStyle(wb, "Technology_Regional", header_style, rows = 3, cols = 1:ncol(tech_regional_truncated))
  }
  
  if (!is.null(sustain_regional)) {
    addWorksheet(wb, "Sustainability_Regional")
    sustain_regional_truncated <- sustain_regional[, 1:min(20, ncol(sustain_regional))]
    writeData(wb, "Sustainability_Regional", "Sustainability Indicators - Regional Summary", startRow = 1)
    writeData(wb, "Sustainability_Regional", sustain_regional_truncated, startRow = 3)
    addStyle(wb, "Sustainability_Regional", title_style, rows = 1, cols = 1)
    addStyle(wb, "Sustainability_Regional", header_style, rows = 3, cols = 1:ncol(sustain_regional_truncated))
  }
  
  if (!is.null(geo_regional)) {
    addWorksheet(wb, "Geopolitical_Regional")
    geo_regional_truncated <- geo_regional[, 1:min(20, ncol(geo_regional))]
    writeData(wb, "Geopolitical_Regional", "Geopolitical Indicators - Regional Summary", startRow = 1)
    writeData(wb, "Geopolitical_Regional", geo_regional_truncated, startRow = 3)
    addStyle(wb, "Geopolitical_Regional", title_style, rows = 1, cols = 1)
    addStyle(wb, "Geopolitical_Regional", header_style, rows = 3, cols = 1:ncol(geo_regional_truncated))
  }
  
  # Set column widths for all sheets
  sheet_names <- getSheetNames(wb)
  for (sheet in sheet_names) {
    setColWidths(wb, sheet, cols = 1:20, widths = "auto")
  }
  
  return(wb)
}

# Create and save the enhanced comprehensive workbook
tryCatch({
  enhanced_workbook <- create_enhanced_statistical_workbook()
  comprehensive_file <- file.path(execution_metadata$export_path, "gai_editorial_analysis", 
                                  paste0("GAI_Editorial_Statistical_Summary_COMPREHENSIVE_", 
                                         str_replace_all(execution_metadata$datetime_utc, "[:-]", ""), ".xlsx"))
  saveWorkbook(enhanced_workbook, comprehensive_file, overwrite = TRUE)
  message("✓ Enhanced comprehensive statistical summary exported to: ", comprehensive_file)
}, error = function(e) {
  message("✗ Error creating enhanced comprehensive Excel workbook: ", e$message)
})

# Export comprehensive rankings separately
tryCatch({
  rankings_file <- file.path(execution_metadata$export_path, "comprehensive_rankings", 
                             paste0("GAI_Editorial_Comprehensive_Multi_Pillar_Rankings_", 
                                    str_replace_all(execution_metadata$datetime_utc, "[:-]", ""), ".xlsx"))
  
  wb_rankings <- createWorkbook()
  addWorksheet(wb_rankings, "Multi_Pillar_Rankings")
  
  # Add title and content
  title_text <- "GAI Editorial - Comprehensive Multi-Pillar Readiness Rankings"
  subtitle_text <- paste("Rankings: 1 = highest performance - ", format(Sys.Date(), "%Y"), " data (", 
                         nrow(comprehensive_rankings), " countries)")
  metadata_text <- paste("Generated:", execution_metadata$datetime_utc, "UTC | User:", execution_metadata$user)
  
  writeData(wb_rankings, "Multi_Pillar_Rankings", title_text, startRow = 1)
  writeData(wb_rankings, "Multi_Pillar_Rankings", subtitle_text, startRow = 2)
  writeData(wb_rankings, "Multi_Pillar_Rankings", metadata_text, startRow = 3)
  writeData(wb_rankings, "Multi_Pillar_Rankings", comprehensive_rankings, startRow = 5)
  
  # Apply regional colors
  title_style <- createStyle(fontName = "Arial", fontSize = 14, textDecoration = "bold", halign = "center")
  subtitle_style <- createStyle(fontName = "Arial", fontSize = 11, halign = "center", textDecoration = "italic")
  metadata_style <- createStyle(fontName = "Arial", fontSize = 9, halign = "center", fontColour = "gray")
  header_style <- createStyle(fontName = "Arial", fontSize = 11, fontColour = "white", fgFill = "#1F78B4", textDecoration = "bold", halign = "center")
  
  addStyle(wb_rankings, "Multi_Pillar_Rankings", title_style, rows = 1, cols = 1)
  addStyle(wb_rankings, "Multi_Pillar_Rankings", subtitle_style, rows = 2, cols = 1)
  addStyle(wb_rankings, "Multi_Pillar_Rankings", metadata_style, rows = 3, cols = 1)
  addStyle(wb_rankings, "Multi_Pillar_Rankings", header_style, rows = 5, cols = 1:ncol(comprehensive_rankings))
  
  # Regional colors
  for (i in 1:nrow(comprehensive_rankings)) {
    region <- comprehensive_rankings$Region[i]
    if (!is.na(region) && region %in% names(excel_region_colors)) {
      region_color <- excel_region_colors[[region]]
      region_style <- createStyle(fgFill = region_color)
      addStyle(wb_rankings, "Multi_Pillar_Rankings", region_style, rows = i + 5, cols = 1:2)
    }
  }
  
  setColWidths(wb_rankings, "Multi_Pillar_Rankings", cols = 1:ncol(comprehensive_rankings), widths = "auto")
  
  saveWorkbook(wb_rankings, rankings_file, overwrite = TRUE)
  message("✓ Comprehensive rankings exported separately: ", rankings_file)
}, error = function(e) {
  message("✗ Error creating comprehensive rankings file: ", e$message)
})

# Export individual statistical summaries to GAI Editorial subdirectory
gai_export_path <- file.path(execution_metadata$export_path, "gai_editorial_analysis")

tryCatch({
  if (!is.null(tech_stats)) {
    tech_file <- file.path(gai_export_path, "Technology_Indicators_Summary.xlsx")
    write.xlsx(tech_stats, tech_file, overwrite = TRUE)
    message("✓ Technology summary exported to: ", tech_file)
  }
}, error = function(e) {
  message("✗ Error exporting Technology summary: ", e$message)
})

tryCatch({
  if (!is.null(sustain_stats)) {
    sustain_file <- file.path(gai_export_path, "Sustainability_Indicators_Summary.xlsx")
    write.xlsx(sustain_stats, sustain_file, overwrite = TRUE)
    message("✓ Sustainability summary exported to: ", sustain_file)
  }
}, error = function(e) {
  message("✗ Error exporting Sustainability summary: ", e$message)
})

tryCatch({
  if (!is.null(geo_stats)) {
    geo_file <- file.path(gai_export_path, "Geopolitical_Indicators_Summary.xlsx")
    write.xlsx(geo_stats, geo_file, overwrite = TRUE)
    message("✓ Geopolitical summary exported to: ", geo_file)
  }
}, error = function(e) {
  message("✗ Error exporting Geopolitical summary: ", e$message)
})

# Export regional summaries as CSV
tryCatch({
  if (!is.null(tech_regional)) {
    tech_regional_file <- file.path(gai_export_path, "Technology_Regional_Summary.csv")
    write.csv(tech_regional, tech_regional_file, row.names = FALSE)
    message("✓ Technology regional summary exported to: ", tech_regional_file)
  }
}, error = function(e) {
  message("✗ Error exporting Technology regional summary: ", e$message)
})

tryCatch({
  if (!is.null(sustain_regional)) {
    sustain_regional_file <- file.path(gai_export_path, "Sustainability_Regional_Summary.csv")
    write.csv(sustain_regional, sustain_regional_file, row.names = FALSE)
    message("✓ Sustainability regional summary exported to: ", sustain_regional_file)
  }
}, error = function(e) {
  message("✗ Error exporting Sustainability regional summary: ", e$message)
})

tryCatch({
  if (!is.null(geo_regional)) {
    geo_regional_file <- file.path(gai_export_path, "Geopolitical_Regional_Summary.csv")
    write.csv(geo_regional, geo_regional_file, row.names = FALSE)
    message("✓ Geopolitical regional summary exported to: ", geo_regional_file)
  }
}, error = function(e) {
  message("✗ Error exporting Geopolitical regional summary: ", e$message)
})

# Export comprehensive rankings as CSV
tryCatch({
  rankings_csv_file <- file.path(execution_metadata$export_path, "comprehensive_rankings", 
                                 paste0("GAI_Editorial_Comprehensive_Multi_Pillar_Rankings_", 
                                        str_replace_all(execution_metadata$datetime_utc, "[:-]", ""), ".csv"))
  write.csv(comprehensive_rankings, rankings_csv_file, row.names = FALSE)
  message("✓ Comprehensive rankings CSV exported to: ", rankings_csv_file)
}, error = function(e) {
  message("✗ Error exporting comprehensive rankings CSV: ", e$message)
})

# ================================================================
# ENHANCED DATA QUALITY ASSESSMENT
# ================================================================

message("\n", paste(rep("=", 60), collapse=""))
message("ENHANCED DATA QUALITY ASSESSMENT WITH COMPREHENSIVE RANKINGS")
message(paste(rep("=", 60), collapse=""))

# Enhanced data quality assessment
assess_enhanced_data_quality <- function() {
  total_countries <- unique(c(tech$Country, sustain$Country, geo$Country))
  
  cat("ENHANCED DATA QUALITY SUMMARY\n")
  cat("=============================\n")
  cat("Total unique countries:", length(total_countries), "\n")
  cat("Technology indicators:", ncol(tech) - 2, "\n")
  cat("Sustainability indicators:", ncol(sustain) - 2, "\n")
  cat("Geopolitical indicators:", ncol(geo) - 2, "\n")
  
  # Coverage by pillar
  tech_coverage <- round(mean(sapply(tech[sapply(tech, is.numeric)], function(x) sum(!is.na(x)) / length(x))), 3)
  sustain_coverage <- round(mean(sapply(sustain[sapply(sustain, is.numeric)], function(x) sum(!is.na(x)) / length(x))), 3)
  geo_coverage <- round(mean(sapply(geo[sapply(geo, is.numeric)], function(x) sum(!is.na(x)) / length(x))), 3)
  
  cat("\nDATA COVERAGE (% non-missing)\n")
  cat("Technology:", tech_coverage * 100, "%\n")
  cat("Sustainability:", sustain_coverage * 100, "%\n")
  cat("Geopolitical:", geo_coverage * 100, "%\n")
  
  # Regional coverage
  cat("\nREGIONAL DISTRIBUTION\n")
  all_regions <- table(c(tech$Region, sustain$Region, geo$Region))
  print(all_regions)
  
  # Comprehensive rankings summary
  if (!is.null(comprehensive_rankings)) {
    cat("\nCOMPREHENSIVE RANKINGS SUMMARY\n")
    cat("Countries in comprehensive ranking:", nrow(comprehensive_rankings), "\n")
    
    # Top 10 performers
    if ("Overall_Rank" %in% names(comprehensive_rankings)) {
      top_10 <- comprehensive_rankings %>% 
        filter(!is.na(Overall_Rank)) %>%
        slice_head(n = 10) %>%
        select(Overall_Rank, Country, Region)
      
      cat("\nTOP 10 OVERALL PERFORMERS:\n")
      print(top_10, row.names = FALSE)
      
      # Regional performance
      regional_performance <- comprehensive_rankings %>%
        filter(!is.na(Overall_Readiness)) %>%
        group_by(Region) %>%
        summarise(
          Countries = n(),
          Avg_Score = round(mean(Overall_Readiness, na.rm = TRUE), 3),
          Best_Rank = min(Overall_Rank, na.rm = TRUE),
          .groups = "drop"
        ) %>%
        arrange(desc(Avg_Score))
      
      cat("\nREGIONAL PERFORMANCE SUMMARY:\n")
      print(regional_performance, row.names = FALSE)
    }
  }
  
  # Create enhanced summary data frame for export
  enhanced_quality_summary <- data.frame(
    Metric = c("Total Countries", "Technology Indicators", "Sustainability Indicators", 
               "Geopolitical Indicators", "Technology Coverage %", "Sustainability Coverage %", 
               "Geopolitical Coverage %", "Countries in Comprehensive Ranking",
               "Normalized Indicators Created", "Pillar Scores Computed"),
    Value = c(length(total_countries), ncol(tech) - 2, ncol(sustain) - 2, ncol(geo) - 2,
              tech_coverage * 100, sustain_coverage * 100, geo_coverage * 100,
              nrow(comprehensive_rankings), 
              sum(str_detect(names(comprehensive_rankings), "_Normalized$")),
              sum(c("Technology_Readiness", "Sustainability_Readiness", "Geopolitical_Readiness") %in% names(comprehensive_rankings))),
    stringsAsFactors = FALSE
  )
  
  return(enhanced_quality_summary)
}

enhanced_quality_summary <- assess_enhanced_data_quality()

# Export enhanced data quality assessment
tryCatch({
  quality_file <- file.path(gai_export_path, "Enhanced_Data_Quality_Assessment.xlsx")
  write.xlsx(enhanced_quality_summary, quality_file, overwrite = TRUE)
  message("✓ Enhanced data quality assessment exported to: ", quality_file)
}, error = function(e) {
  message("✗ Error exporting enhanced data quality assessment: ", e$message)
})

# ================================================================
# FINAL ENHANCED SUMMARY
# ================================================================

message("\n", paste(rep("=", 80), collapse=""))
message("GAI EDITORIAL STATISTICAL ANALYSIS WITH COMPREHENSIVE RANKINGS COMPLETED")
message("EXPORT TO GVC AFRICA DIRECTORY SUCCESSFUL")
message(paste(rep("=", 80), collapse=""))

message("\nEXPORT DIRECTORY: ", execution_metadata$export_path)
message("GAI EDITORIAL SUBDIRECTORY: ", file.path(execution_metadata$export_path, "gai_editorial_analysis"))
message("COMPREHENSIVE RANKINGS: ", file.path(execution_metadata$export_path, "comprehensive_rankings"))

message("\nCOMPLETED ENHANCED ANALYSES:")
message("✓ Comprehensive statistical descriptions for all three pillars")
message("✓ Regional summaries with detailed breakdowns")
message("✓ Enhanced data quality assessment")
message("✓ Indicator normalization (min-max scaling to 0-1)")
message("✓ Comprehensive multi-pillar ranking system")
message("✓ Overall readiness scores and rankings")
message("✓ Regional performance analysis")
message("✓ Multiple exports with enhanced styling")
message("✓ GVC AFRICA aligned region assignments")

message("\nGENERATED FILES IN GVC AFRICA DIRECTORY:")
message("GAI Editorial Analysis Subdirectory:")
message("- GAI_Editorial_Statistical_Summary_COMPREHENSIVE_*.xlsx (master workbook)")
message("- Technology_Indicators_Summary.xlsx")
message("- Sustainability_Indicators_Summary.xlsx")  
message("- Geopolitical_Indicators_Summary.xlsx")
message("- Technology_Regional_Summary.csv")
message("- Sustainability_Regional_Summary.csv")
message("- Geopolitical_Regional_Summary.csv")
message("- Enhanced_Data_Quality_Assessment.xlsx")

message("\nComprehensive Rankings Subdirectory:")
message("- GAI_Editorial_Comprehensive_Multi_Pillar_Rankings_*.xlsx")
message("- GAI_Editorial_Comprehensive_Multi_Pillar_Rankings_*.csv")

message("\nNEW COMPREHENSIVE RANKING FEATURES:")
message("✓ Normalized indicators (0-1 scale) for fair comparison")
message("✓ Technology Readiness composite score")
message("✓ Sustainability Readiness composite score")
message("✓ Geopolitical Readiness composite score")
message("✓ Overall Readiness score (average of all pillars)")
message("✓ Individual pillar rankings")
message("✓ Overall readiness ranking")
message("✓ Regional performance benchmarking")
message("✓ Top 10 performers identification")
message("✓ Excel export with regional color coding")
message("✓ GVC AFRICA pipeline alignment")

message("\nSTATISTICS INCLUDED:")
message("- N Valid, N Missing, Coverage %")
message("- Mean, Median, Standard Deviation")
message("- Min, Max, Q1, Q3")
message("- Regional breakdowns for all metrics")
message("- Comprehensive multi-pillar rankings")
message("- Enhanced data quality metrics")

if (!is.null(comprehensive_rankings) && "Overall_Rank" %in% names(comprehensive_rankings)) {
  top_5 <- comprehensive_rankings %>% 
    filter(!is.na(Overall_Rank)) %>%
    slice_head(n = 5) %>%
    select(Overall_Rank, Country, Region, Overall_Readiness)
  
  message("\nTOP 5 OVERALL PERFORMERS:")
  for (i in 1:nrow(top_5)) {
    message("  ", top_5$Overall_Rank[i], ". ", top_5$Country[i], " (", top_5$Region[i], ") - Score: ", round(top_5$Overall_Readiness[i], 3))
  }
}

message("\nAnalysis completed at:", Sys.time())
message("User:", execution_metadata$user)
message("Export path:", execution_metadata$export_path)
message("All enhanced statistical summaries with comprehensive rankings exported to GVC AFRICA directory!")

message("\n", paste(rep("=", 80), collapse=""))
message("SUCCESS: GAI EDITORIAL ANALYSIS EXPORTED TO GVC AFRICA DIRECTORY")
message("Ready for integration with GVC Africa project workflows")
message(paste(rep("=", 80), collapse=""))
